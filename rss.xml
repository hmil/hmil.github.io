<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>hmil&#39;s blog</title>
        <link>https://code.hmil.fr</link>
        <description></description>
        <language>en</language>
        <pubDate>Fri, 17 Sep 2021 20:00:00 +0200</pubDate>
        <lastBuildDate>Fri, 17 Sep 2021 20:00:00 +0200</lastBuildDate>
        <category>TypeScript</category>
        <category>JavaScript</category>
        <category>funrun</category>
        <category>funrun2</category>
        <category>hack</category>
        <category>reverse engineering</category>
        <category>android</category>
        <category>rant</category>
        <category>GitHub</category>
        <category>monorepo</category>
        <category>architecture</category>
        <category>ESP8266</category>
        <category>IoT</category>
        <category>wifi</category>
        <category>arduino</category>
        <category>nodeMCU</category>
        <category>embedded</category>
        <category>git</category>
        <category>github</category>
        <category>React</category>
        <category>Angular</category>
        <category>Vue</category>
        <category>Svelte</category>
        <item>
            <guid isPermalink="true">https://code.hmil.fr/2021/09/how-ui-frameworks-grab-control/</guid>
            <title>How to grab control: 4 tactics used by UI libraries</title>
            <link>https://code.hmil.fr/2021/09/how-ui-frameworks-grab-control/</link>
            <category>JavaScript</category>
            <category>React</category>
            <category>Angular</category>
            <category>Vue</category>
            <category>Svelte</category>
            <pubDate>Fri, 17 Sep 2021 20:00:00 +0200</pubDate>
            <description>&lt;p&gt;In this post we explore tactics used by maintream UI libraries to obtain control.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;What-is-control&#34;&gt;&lt;a href=&#34;#What-is-control&#34; class=&#34;headerlink&#34; title=&#34;What is control?&#34;&gt;&lt;/a&gt;What is control?&lt;/h2&gt;&lt;p&gt;Take a look at the following code snippet which uses the native browser APIs.&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;render&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;model&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Create an element&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; element = &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.createElement(&lt;span class=&#34;string&#34;&gt;&amp;#x27;div&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.body.appendChild(element);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Update the element&amp;#x27;s style&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    element.style.setProperty(&lt;span class=&#34;string&#34;&gt;&amp;#x27;background-color&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;blue&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Add some text&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; text = &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.createTextNode(&lt;span class=&#34;string&#34;&gt;`Welcome to &lt;span class=&#34;subst&#34;&gt;$&amp;#123;model.city&amp;#125;&lt;/span&gt;!`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    element.appendChild(text);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The web does not natively provide a way to &lt;em&gt;describe&lt;/em&gt; what the UI should look like. The only thing it offers is a set of instructions to modify the document.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Therefore, if you want something to change on the screen, some code needs to run to make those changes. The browser can’t perform those changes automatically.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Most modern UI libraries let you express your application in a declarative way. Any code written with such library can be boiled down to this:&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// UI code written with a modern library generally boils down to some state and a view.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// The view uses the state.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; state = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;city&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;London&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; view = &lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;style&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#123;&amp;#123;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;backgroundColor:&lt;/span&gt; &amp;#x27;&lt;span class=&#34;attr&#34;&gt;blue&lt;/span&gt;&amp;#x27; &amp;#125;&amp;#125;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;xml&#34;&gt;    Welcome to &amp;#123;state.city&amp;#125;!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The library promises that, whenever you make changes to your state, it will take care of updating the view automatically for you.&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Updating the model will &amp;quot;magically&amp;quot; update the view as well&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;state.city = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Budapest&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But remember what we said earlier: The DOM cannot change unless some code runs to modify it. Our code above modified the model, but it did not modify the view. Consequently, the view didn’t get updated with the new state!&lt;/p&gt;
&lt;p&gt;If we wanted the view to refresh, we should be doing something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Update the state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;state.city = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Budapest&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Hand control over to the framework to re-render the view&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;refresh();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The details of how to implement such &lt;code&gt;refresh&lt;/code&gt; method aren’t important for this discussion. Suffices to know that it looks for changes in the state, and then make the corresponding modifications to the document using imperative browser API calls.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;All UI frameworks require some kind of refresh function like this.&lt;/strong&gt; There is no way to get away from it, because as we said earlier: some code needs to run to modify the document!&lt;/p&gt;
&lt;p&gt;But having to call a refresh function manually isn’t very practical and breaks the illusion that the model is &lt;em&gt;stuck&lt;/em&gt; to the view (we call this illusion &lt;em&gt;data binding&lt;/em&gt;). What we want is for this refresh function to somehow be invoked &lt;strong&gt;automatically&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This&lt;/em&gt; is the paradox of control: the user never needs to explicitly hand control over to the framework, and yet some code &lt;em&gt;has&lt;/em&gt; to run for the view to refresh!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If the user is not invoking the refresh function, then who is?&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;React-Keeping-it-simple&#34;&gt;&lt;a href=&#34;#React-Keeping-it-simple&#34; class=&#34;headerlink&#34; title=&#34;React: Keeping it simple&#34;&gt;&lt;/a&gt;React: Keeping it simple&lt;/h2&gt;&lt;p&gt;There are many ways to solve this paradox. The first one we’ll study is perhaps the easiest to understand and it is most famously implemented by React.&lt;/p&gt;
&lt;p&gt;In React, it is still the user’s responsibility to call the refresh function. The catch is that the refresh function is hidden in ordinary calls to React APIs.&lt;/p&gt;
&lt;p&gt;For instance state cannot be defined anywhere, it must be defined in a component’s &lt;code&gt;state&lt;/code&gt; property, and you must use &lt;code&gt;setState&lt;/code&gt; (or the equivalent hook) to update it.&lt;/p&gt;
&lt;p&gt;When you invoke &lt;code&gt;setState&lt;/code&gt;, you incidentally pass &lt;strong&gt;control&lt;/strong&gt; over to React, and give it an opportunity to re-render.&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Without React:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;state.city = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Budapest&amp;#x27;&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// Set the state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;refresh(); &lt;span class=&#34;comment&#34;&gt;// Then refresh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// With React: Set the state and refresh in a single call&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;setState(&amp;#123; &lt;span class=&#34;attr&#34;&gt;city&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Budapest&amp;#x27;&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Of course, React doesn’t immediately re-render the view when you call &lt;code&gt;setState&lt;/code&gt;. Instead, it schedules a refresh to be performed on the next frame, such that all modifications happening during this frame can be batched into a single render pass.&lt;/p&gt;
&lt;p&gt;This explains why direct mutations of state are not allowed in React. When you do this, then React has no opportunity to schedule a re-render of the view.&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// We don&amp;#x27;t hand control over to react after this assignment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// so it has no opportunity to re-render the view!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;state.city = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Paris&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;note: Control is just one of multiple reasons why React doesn’t like mutable state. But the other reasons are beyond the scope of this post.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;Angular-Big-Brother-Is-Watching-You&#34;&gt;&lt;a href=&#34;#Angular-Big-Brother-Is-Watching-You&#34; class=&#34;headerlink&#34; title=&#34;Angular: Big Brother Is Watching You&#34;&gt;&lt;/a&gt;Angular: Big Brother Is Watching You&lt;/h2&gt;&lt;p&gt;As we saw, React politely waits until the developer hands control over to the framework. Meanwhile, Angular is going for a dramatically different route.&lt;/p&gt;
&lt;p&gt;Angular instruments the complete browser runtime to make sure that it &lt;strong&gt;always&lt;/strong&gt; acquire control before user code!&lt;/p&gt;
&lt;p&gt;Yes, you read that right. Let me illustrate that with an example, in case your brain is actively blocking the meaning of the above sentence to save your sanity.&lt;/p&gt;
&lt;p&gt;Say we want to know whenever user code runs as a result of a &lt;code&gt;setTimeout&lt;/code&gt; timer expiring. We can do this by replacing the global function with ours.&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; originalSetTimeout = &lt;span class=&#34;built_in&#34;&gt;window&lt;/span&gt;.setTimeout;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;window&lt;/span&gt;.setTimeout = &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;cb&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    originalSetTimeout(wrap(cb), ...arguments.slice(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;wrap&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;cb&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(&lt;span class=&#34;string&#34;&gt;&amp;#x27;THE USER CODE IS ABOUT TO RUN!&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cb(...arguments);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(&lt;span class=&#34;string&#34;&gt;&amp;#x27;THE USER CODE HAS FINISHED RUNNING!&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The practice of replacing a function like that is called monkey patching or sometimes also swizzling.&lt;/p&gt;
&lt;p&gt;Now if we have user code like this…&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;setTimeout&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Going to a different city&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    state.city = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Berlin&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, &lt;span class=&#34;number&#34;&gt;10000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;…there is no need to hand control back to Angular after the state modification, because Angular already had control all along!&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;THE USER CODE IS ABOUT TO RUN!&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Going to a different city&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;THE USER CODE HAS FINISHED RUNNING!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We could use this technique to trigger a new render when the user callback is invoked:&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;wrap&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;cb&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cb(...arguments);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// The user code most likely modified something.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// So let&amp;#x27;s schedule a render just in case.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        refresh();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now, this is just for &lt;code&gt;setTimeout&lt;/code&gt;. But imagine we did this for &lt;em&gt;every single entry point in the browser API&lt;/em&gt;: All event handlers like &lt;code&gt;addEventListener&lt;/code&gt;, network apis like &lt;code&gt;fetch&lt;/code&gt; and &lt;code&gt;XMLHttpRequest&lt;/code&gt;, all message passing, timers, etc… If we covered all of the native APIs, then there would be no way at all for user code to escape our surveillance!&lt;/p&gt;
&lt;p&gt;Well that’s exactly what Angular does. Anytime user code runs, Angular knows about it and it attempts to re-render the view in case any state has changed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Angular is the Big Brother of the runtime.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;Vue-High-tech-black-magic&#34;&gt;&lt;a href=&#34;#Vue-High-tech-black-magic&#34; class=&#34;headerlink&#34; title=&#34;Vue: High tech black magic&#34;&gt;&lt;/a&gt;Vue: High tech black magic&lt;/h2&gt;&lt;p&gt;Vue’s solution to the control paradox is closer to React than it is to Angular.&lt;/p&gt;
&lt;p&gt;Like React, vue requires that you tell it about the state you are going to use.&lt;/p&gt;
&lt;p&gt;Unlike React, once you have declared your state, vue doesn’t require you to invoke a special function to modify your state.&lt;/p&gt;
&lt;p&gt;In &lt;em&gt;abstract&lt;/em&gt; terms, vue code kind of looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; state = createSomeStateWithVue(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;city&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;London&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Now I am free to modify my state however I want&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;state.city = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Lausanne&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now if you are anything like me, this should look suspicious. How on earth is vue able to tell when properties on the state are modified? If it’s not instrumenting the runtime like Angular, then it cannot know that code was running. But since no function of the framework is invoked, the framework never obtains control to perform the refresh. So how is it possible that vue still manages to keep the view in sync with the model?!&lt;/p&gt;
&lt;p&gt;The answer is: &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy&#34;&gt;Proxies&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A proxy works by wrapping an object into some sort of magic sensor which can detect whenever the object is read, written to or called.&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;createSomeStateWithVue&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;original&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Proxy&lt;/span&gt;(original, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;title&#34;&gt;set&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;target, prop, value&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(&lt;span class=&#34;string&#34;&gt;`Property &lt;span class=&#34;subst&#34;&gt;$&amp;#123;prop&amp;#125;&lt;/span&gt; was set to &lt;span class=&#34;subst&#34;&gt;$&amp;#123;value&amp;#125;&lt;/span&gt;.`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; ret =  &lt;span class=&#34;built_in&#34;&gt;Reflect&lt;/span&gt;.set(...arguments);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            refresh();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now, when the user tries to write to any property of the model, the &lt;code&gt;set&lt;/code&gt; function is going to be invoked.&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Calls the setter and prints &amp;quot;Property city was set to Tallinn&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.city = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Tallinn&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// no need to call `refresh()` here because&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// it was already called while we were setting the property.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Svelte-A-smarter-way&#34;&gt;&lt;a href=&#34;#Svelte-A-smarter-way&#34; class=&#34;headerlink&#34; title=&#34;Svelte: A smarter way&#34;&gt;&lt;/a&gt;Svelte: A smarter way&lt;/h2&gt;&lt;p&gt;Last in our list, Svelte comes with yet another completely different solution from all previous frameworks.&lt;/p&gt;
&lt;p&gt;In short, what Vue does at runtime, Svelte does it at compile time.&lt;/p&gt;
&lt;p&gt;Svelte uses a compiler to transform the source code ahead of time, before shipping it to the browser.&lt;/p&gt;
&lt;p&gt;How does this relate to the problem of control? With the compiler, svelte can find out all state mutations and annotate them.&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// This code:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.city = &lt;span class=&#34;string&#34;&gt;&amp;#x27;London&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Gets compiled into:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.city = &lt;span class=&#34;string&#34;&gt;&amp;#x27;London&amp;#x27;&lt;/span&gt;; refresh();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;It essentially injects the refresh calls for you, where they are needed.&lt;/p&gt;
&lt;h2 id=&#34;Summary&#34;&gt;&lt;a href=&#34;#Summary&#34; class=&#34;headerlink&#34; title=&#34;Summary&#34;&gt;&lt;/a&gt;Summary&lt;/h2&gt;&lt;p&gt;The paradox of control is one of the many problems UI frameworks and libraries solve, and it wouldn’t make a ton of sense to compare all frameworks side by side based only on this information. Interesting synergies arise when multiple problems get solved together by a framework. &lt;/p&gt;
&lt;p&gt;For instance, React’s love for immutable state is not just about control, but it also plays a central role to optimize rendering of the component tree and offers advantages for code analysis and debugging.&lt;br&gt;Similarly, the primary goal of Svelte’s compiler isn’t to inject the &lt;code&gt;refresh&lt;/code&gt; calls. This is just the cherry on top of the actual value brought by the compiler, which is eliminating the need for a runtime library and virtual DOM.&lt;/p&gt;
&lt;p&gt;But in my opinion understanding how a library solves the paradox of control is the key to understanding how it works as a whole. It is the very core of the system, and every other technical decision seems to follow from it as an unavoidable consequence.&lt;/p&gt;
&lt;p&gt;As a parting gift, I’ll leave you with this recap table:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Library&lt;/th&gt;
&lt;th&gt;Strategy&lt;/th&gt;
&lt;th&gt;Pros&lt;/th&gt;
&lt;th&gt;Cons&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;React&lt;/td&gt;
&lt;td&gt;User must call a React entry point&lt;/td&gt;
&lt;td&gt;Simple solution.&lt;/td&gt;
&lt;td&gt;Requires immutability and managed state. Harder for beginners and makes some things more difficult.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Angular&lt;/td&gt;
&lt;td&gt;Instrument the entire runtime&lt;/td&gt;
&lt;td&gt;Guaranteed to always work. State can be stored anywhere.&lt;/td&gt;
&lt;td&gt;Very heavy solution. The framework needs to keep up with new web APIs.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vue&lt;/td&gt;
&lt;td&gt;Proxy the model&lt;/td&gt;
&lt;td&gt;Almost as simple as React, works almost as well as Angular.&lt;/td&gt;
&lt;td&gt;Not quite as simple as React. State needs to be handled in a way the Proxy can understand.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Svelte&lt;/td&gt;
&lt;td&gt;Compiler instruments code&lt;/td&gt;
&lt;td&gt;Lightweight, should work as well as vue.&lt;/td&gt;
&lt;td&gt;Requires a compile-time step. State needs to be handled in a way the compiler can understand.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;Be sure to check out the &lt;a href=&#34;https://github.com/hmil/data-binding&#34;&gt;demo repository&lt;/a&gt; which demonstrates each strategy covered in this blog post with a minimalist proof of concept.&lt;/p&gt;
</description>
        </item>
        <item>
            <guid isPermalink="true">https://code.hmil.fr/2020/03/game-of-pong-on-esp8266/</guid>
            <title>A multiplayer game of pong on the ESP8266</title>
            <link>https://code.hmil.fr/2020/03/game-of-pong-on-esp8266/</link>
            <category>ESP8266</category>
            <category>IoT</category>
            <category>wifi</category>
            <category>arduino</category>
            <category>nodeMCU</category>
            <pubDate>Sun, 15 Mar 2020 17:30:32 +0100</pubDate>
            <description>&lt;p&gt;This is absolutely not what this chip had been designed to do. But here it is: the WiFi multiplayer game of pong on the &lt;a href=&#34;https://code.hmil.fr/2018/07/ultimate-esp8266-guide/&#34;&gt;ESP8266&lt;/a&gt;.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;This project turned out to be much more challenging than writing a regular desktop game of pong due to the limitations of the platform. But difficulty is what makes a project fun isn’t it?&lt;/p&gt;
&lt;div class=&#34;video-container&#34;&gt;&lt;iframe src=&#34;https://www.youtube.com/embed/GfEgq1qtt-4&#34; frameborder=&#34;0&#34; loading=&#34;lazy&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;h2 id=&#34;How-it-works&#34;&gt;&lt;a href=&#34;#How-it-works&#34; class=&#34;headerlink&#34; title=&#34;How it works&#34;&gt;&lt;/a&gt;How it works&lt;/h2&gt;&lt;p&gt;This project uses the &lt;a href=&#34;https://github.com/nodemcu/nodemcu-firmware/&#34;&gt;NodeMCU firmware&lt;/a&gt;, which lets us write the application using lua scripts, while the heavy lifting is handled by native modules in the firmware.&lt;/p&gt;
&lt;p&gt;We also use &lt;a href=&#34;https://github.com/olikraus/u8g2&#34;&gt;U8G2&lt;/a&gt; to control a SSD1306-based LED screen of 128x64 pixels. Two push buttons are added for user input.&lt;/p&gt;
&lt;p&gt;The ESP8266 has only one CPU core which must handle both the WiFi stack and the user code. The SDK supporting NodeMCU is event-driven and non preemptive. This means that it maintains an internal queue of event handlers and runs one handler at a time. If there is something urgent in the queue, the SDK can not interrupt the current handler to do that urgent thing; It must wait until the current handler has finished.&lt;/p&gt;
&lt;p&gt;In practice, any invokation of our lua code must complete in under 15 milliseconds, otherwise the WiFi stack might starve and cause the device to crash and reboot.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/espong/nodemcu-timing.png&#34; alt=&#34;Simplified view of time sharing in the NodeMCU framework. The WiFi stack needs to obtain the CPU every 15 milliseconds.&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Differential-rendering&#34;&gt;&lt;a href=&#34;#Differential-rendering&#34; class=&#34;headerlink&#34; title=&#34;Differential rendering&#34;&gt;&lt;/a&gt;Differential rendering&lt;/h2&gt;&lt;p&gt;One major consequence of the above is that we need to consider the time it takes u8g2 to update the screen.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/espong/u8g2-timing.png&#34; alt=&#34;Timing diagram accounting for the time it takes to send data to the screen&#34;&gt;&lt;/p&gt;
&lt;p&gt;The graphic library works with an internal buffer. All drawing operations are made against this buffer. Then, you need to call a function to actually draw this buffer on the screen.&lt;/p&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- Make changes to the internal buffer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;disp:drawLine(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;128&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;disp:drawLine(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;63&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;128&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;63&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- Send the buffer to the screen&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;disp:updateDisplay()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The problem with this approach is that updating the whole screen takes almost the entire time available to run our game loop. There is not enough time left to process inputs, update the state, compute collisions and redraw the objects.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/espong/u8g2-full.png&#34; alt=&#34;The entire frame buffer is sent to the screen&#34;&gt;&lt;/p&gt;
&lt;p&gt;Fortunately, full buffer updates aren’t the only way we can update the screen. u8g2 cuts a screen into tiles of 8x8 pixels which we can update individually using &lt;code&gt;updateDisplayArea&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The first optimization we make is to mark tiles which have changed and only send those tiles instead of the whole screen.&lt;br&gt;However, even with this optimization, there comes times when too much of the screen has changed at once and the rendering still takes too long and crashes.&lt;/p&gt;
&lt;p&gt;The second optimization is to keep track of time while sending the tiles to the screen. When we get too close to the limit, we stop sending new tiles and continue from where we left in the next render cycle.&lt;/p&gt;
&lt;p&gt;Here is the pseudo code for the rendering logic. We keep cycling through the tiles and stop when we have rendered the whole screen, or when there is no time left. Only dirty tiles are effectively rendered.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;i = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;renderScreen:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  tilesRendered = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  while tilesRendered &amp;lt; n_tiles &amp;amp;&amp;amp; get_remaining_time() &amp;gt; 0:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if is_dirty[i]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      updateDisplayArea(coordinates_of_tile(i))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      is_dirty[i] = false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tilesRendered++&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    i = (i + 1) % n_tiles&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&#34;/assets/espong/u8g2-partial.png&#34; alt=&#34;Dirty areas of the screen are marked. There was just enough time left in the first frame to send the green tiles. Red tiles were saved for the next frame.&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Miscellaneous&#34;&gt;&lt;a href=&#34;#Miscellaneous&#34; class=&#34;headerlink&#34; title=&#34;Miscellaneous&#34;&gt;&lt;/a&gt;Miscellaneous&lt;/h2&gt;&lt;p&gt;There’s plenty more things in the code which I did not discuss here, like how the game logic works in multiplayer as well as various other performance tricks. &lt;/p&gt;
&lt;p&gt;Check out &lt;a href=&#34;https://github.com/hmil/espong&#34;&gt;the project on GitHub&lt;/a&gt; if you want to dive deeper into the code or if you want to run it yourself.&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
</description>
        </item>
        <item>
            <guid isPermalink="true">https://code.hmil.fr/2018/07/ultimate-esp8266-guide/</guid>
            <title>The definitive ESP8266 getting started guide for programmers</title>
            <link>https://code.hmil.fr/2018/07/ultimate-esp8266-guide/</link>
            <category>ESP8266</category>
            <category>IoT</category>
            <category>wifi</category>
            <category>arduino</category>
            <category>nodeMCU</category>
            <category>embedded</category>
            <pubDate>Sat, 21 Jul 2018 17:00:00 +0200</pubDate>
            <description>&lt;h2 id=&#34;What-is-the-ESP8266&#34;&gt;&lt;a href=&#34;#What-is-the-ESP8266&#34; class=&#34;headerlink&#34; title=&#34;What is the ESP8266?&#34;&gt;&lt;/a&gt;What is the ESP8266?&lt;/h2&gt;&lt;p&gt;The ESP8266 is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Ford_Model_T&#34;&gt;Ford model T&lt;/a&gt; of the electronics hobbyist: bringing wifi capabilities to the masses at a ridiculously low price. When I first heard about it, it just blew my mind. GPIO + wifi for a couple of bucks?! GET, OUT!&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;After the initial hype, I quickly realized it was going to be more work than I planned to get the setup I wanted. Indeed, the web is flooded with contradictory information on how to use the chip. There are dozens of ways to use the chip and a seemingly infinite range of devices leveraging it. I had to spend a few days researching how to program and run the damn thing!&lt;/p&gt;
&lt;p&gt;That’s why I wrote this guide: This is my personal take on the ESP8266, what I believe is the &lt;em&gt;golden path to ESP8266 development&lt;/em&gt;. &lt;strong&gt;I will show you the fastest way to get the most value out of this nifty module, based on my experience and on what worked best for me.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you already know a bit of programming and just want a comfortable and simple environment to write robust IoT applications for cheap, then my friend, you are golden.&lt;/p&gt;
&lt;h2 id=&#34;Which-module-should-I-buy&#34;&gt;&lt;a href=&#34;#Which-module-should-I-buy&#34; class=&#34;headerlink&#34; title=&#34;Which module should I buy?&#34;&gt;&lt;/a&gt;Which module should I buy?&lt;/h2&gt;&lt;p&gt;Let’s start with the hardware. The ESP8266 chip itself is pretty useless to the hobbyist: It has timy SMD terminals, no antenna, very little memory, no USB interface, and requires a few external resistors even just to boot.&lt;br&gt;Therefore, when people talk about the EPS8266, they generally mean &lt;em&gt;a board which harnesses the ESP8266 chip&lt;/em&gt;. There is a vast ecosystem of such boards and I will describe a handful of those here, including the one I recommend.&lt;/p&gt;
&lt;h3 id=&#34;ESP-XX-modules&#34;&gt;&lt;a href=&#34;#ESP-XX-modules&#34; class=&#34;headerlink&#34; title=&#34;ESP-XX modules&#34;&gt;&lt;/a&gt;ESP-XX modules&lt;/h3&gt;&lt;p&gt;These are the most basic and widespread modules for the ESP8266. Orignially built by a company called Ai-Thinker, they feature the bare minimum hardware you’ll need.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/esp8266/ESP07_01_12F.png&#34; alt=&#34;Modules of the ESP-XX family by ai-Thinker. From left to right: ESP-07, ESP-01 and ESP-12F&#34;&gt;&lt;/p&gt;
&lt;p&gt;The ESP-01 is the oldest module in this familly. It features 4x2 male pins for power, boot modes, GPIO and UART (note that despite using 2.5mm pins, you cannot plug it in a breadboard since this would short pairs of pins together). You’ll find plenty of tutorials about this module on the web, but they apply to its successors as well. Therefore, there is no significant reason to prefer this module over its successors.&lt;/p&gt;
&lt;p&gt;The ESP-12x series is an evolution of the ESP-01, still by the same company. These module fullfill &lt;strong&gt;exactly the same role as the ESP-01&lt;/strong&gt;, but they have a dramatically different interface. The dip male pins are supplanted by 2mm solder pads, which means you can’t plug that in your trusty 2.5mm breadboard. They features an onboard antenna, just like the ESP-01, but are also shielded, which presumably enhances their immunity to RF interference. The most popular nowadays is the ESP-12f which boasts some “improved antenna performance”, whatever that means.&lt;/p&gt;
&lt;p&gt;The ESP-07 comes in the same form factor and pinout as the ESP-12f. The major difference we’ll notice as hobbyists is that it doesn’t have an antenna. Instead it features a &lt;em&gt;U.FL socket&lt;/em&gt; in which you are supposed to plug an external antenna. This design has a &lt;a href=&#34;https://www.youtube.com/watch?v=KYLN9qH0C84&#34;&gt;significantly better range&lt;/a&gt; while presumably consuming more power (if someone happens to measure that difference, please let me know the results).&lt;/p&gt;
&lt;p&gt;Both the ESP-12f and ESP-07 require an additional breakout board to convert the 2mm pins to 2.5mm.&lt;/p&gt;
&lt;p&gt;There are more modules in this familly and you can take a look at &lt;a href=&#34;https://en.wikipedia.org/wiki/ESP8266#Ai-Thinker_modules&#34;&gt;the list&lt;/a&gt; if you are interested. I will not detail how to use them in this article to keep things short. Just know that I advise beginnersagainst using these modules directly. I made the mistake of buying these and lost a few days fixing silly issues that I wouldn’t have faced with a more complete board.&lt;/p&gt;
&lt;h3 id=&#34;The-NodeMCU-devkits&#34;&gt;&lt;a href=&#34;#The-NodeMCU-devkits&#34; class=&#34;headerlink&#34; title=&#34;The NodeMCU devkits&#34;&gt;&lt;/a&gt;The NodeMCU devkits&lt;/h3&gt;&lt;p&gt;The &lt;a href=&#34;http://nodemcu.com/&#34;&gt;NodeMCU&lt;/a&gt; project provides an open source software and hardware solution for working with the ESP8266. Despite being built specifically for the NodeMCU software, the hardware can also be used as a general purpose ESP8266 development kit. We will talk more about the software later.&lt;/p&gt;
&lt;p&gt;The original design incorporates an ESP-12E module, a USB-to-UART converter, 5v to 3.3v voltage regulation, a couple push buttons for reset and flash mode, and exports a micro-usb port and 2 rows of 15 DIP male pins. Needless to say it saves &lt;strong&gt;a lot of effort&lt;/strong&gt; working with the chip. Cost-wise it’s between $0.5 and $1 more expensive than a bare ESP-12f. You need &lt;del&gt;all&lt;/del&gt; most of the features on the board anyway so don’t try to cut corners and just buy the board already.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;At a price tag of just over 3$, this is the only board you’ll ever need for ESP8266-based projects.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;By virtue of open source hardware, you will find a lot of variations of the design online and will quickly get lost when shopping. While all boards have similar caracteristics, be aware that some models are impractically large and cover all 10 rows of small breadboards. Therefore, I recommend sticking with the one commonly found under the name “v2” (sometimes also “v1”). See the pictures below to know what to look for. You might also want to take a look at &lt;a href=&#34;https://frightanic.com/iot/comparison-of-esp8266-nodemcu-development-boards/&#34;&gt;this comparison&lt;/a&gt; published by the main contributor to the NodeMCU project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/esp8266/NodeMCU_v2_v3.png&#34; alt=&#34;Two common NodeMCU boards found on AliExpress: the one on the left is branded as &amp;quot;v2&amp;quot;, and the right &amp;quot;v3&amp;quot;. Notice the pin labels on the v3 are horizontal and take up more space, making the board uncomfortably large.&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: If you are wondering what NodeMCU has to do with Node.js, well… nothing.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;Which-software-can-I-use-to-program-the-ESP8266&#34;&gt;&lt;a href=&#34;#Which-software-can-I-use-to-program-the-ESP8266&#34; class=&#34;headerlink&#34; title=&#34;Which software can I use to program the ESP8266?&#34;&gt;&lt;/a&gt;Which software can I use to program the ESP8266?&lt;/h2&gt;&lt;p&gt;You should now have a better understanding of the hardware landscape surrounding the ESP8266. Well, that was just the beginning. The software side is even more diverse and confusing than that.&lt;br&gt;I will teach you the basic principles and show a couple of popular solutions. I will then help you run a proof of concept using the solution that I recommend.&lt;/p&gt;
&lt;h3 id=&#34;No-software&#34;&gt;&lt;a href=&#34;#No-software&#34; class=&#34;headerlink&#34; title=&#34;No software&#34;&gt;&lt;/a&gt;No software&lt;/h3&gt;&lt;p&gt;As surprising as it may seem, the ESP8266 is actually first meant to be used as a wifi peripheral, and not to be programmed directly!&lt;br&gt;The default firmware is a simple serial command interpreter, which means that you can do wifi communication just by sending commands from a terminal (or another microcontroller). For instance, this is how you connect to an access point, and make a GET request to &lt;code&gt;http://httpbin.org/ip&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;AT+CIPMUX=0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;AT+CWMODE=1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;AT+CIPSTART=&amp;quot;TCP&amp;quot;,&amp;quot;httpbin.org&amp;quot;,80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;AT+CIPSEND=20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;GET /ip HTTP/1.0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// Notice that the two line returns above are part of the HTTP request and should be in \r\n form&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;There is plenty of documentation about this interface on the web; therefore, we are going to keep this section short. In this post we are interested in programming the chip rather than using it as a mere peripheral. Why bother adding a $20 arduino in the setup when the ESP8266 alone can handle everything for under $3?!&lt;/p&gt;
&lt;h3 id=&#34;Low-level-C-interfaces&#34;&gt;&lt;a href=&#34;#Low-level-C-interfaces&#34; class=&#34;headerlink&#34; title=&#34;Low-level C interfaces&#34;&gt;&lt;/a&gt;Low-level C interfaces&lt;/h3&gt;&lt;p&gt;This paragraph is key to understanding the diversity of the software ecosystem for the ESP8266, so pay attention.&lt;br&gt;Espressif systems (the manufacturer of the ESP8266) initially released a software development kit in C that people could use to program the chip. This SDK only had chinese documentation and was rather complex, so for some time the chip remained obscure and unknown of the hacking community. Nowadays, I believe the documentation has been translated to english and the community was able to build powerful frameworks on top of it.&lt;/p&gt;
&lt;p&gt;There are two components to this low level SDK: the “RTOS” version and the “SDK” version. A detailed explaination about the differences is way beyond the scope of this article, but just know that developers must chose one and stick with it. One allows you to program inside a real-time operating system (RTOS), the other one hands over complete control to the programmer. Anyways, these details are not super relevant to us. Just know that the tools you’ll use are based on one of these frameworks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It is very unlikely you’ll ever need to use the low-level C libraries. The frameworks built on top of it are much preferred&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;Arduino&#34;&gt;&lt;a href=&#34;#Arduino&#34; class=&#34;headerlink&#34; title=&#34;Arduino&#34;&gt;&lt;/a&gt;Arduino&lt;/h3&gt;&lt;p&gt;Of course it’s a thing! Using the C SDK discussed above, a compatibility layer for arduino was developped. It allows one to program applications on the ESP8266 just like on a regular arduino. No matter how attractive this idea is to you, let me warn you: &lt;strong&gt;I do not think it is a good idea to use the Arduino framework to program the ESP8266&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The ESP8266 + arduino combo seems very popular (google around and you’ll see). I think this is mainly due to the authority of Arduino and the fact that many in the Arduino community aren’t programmers, rather than the pure technical characteristics of the solution. Gee, some people love arduino so much they’ll even hook one of those to the ESP8266’s UART for applications that could &lt;em&gt;easily&lt;/em&gt; fit on the ESP alone!&lt;/p&gt;
&lt;p&gt;The Arduino programming model does not work well with the ESP8266’s architecture.&lt;br&gt;In arduino, you are usually the sole user of the CPU and you do not care much about power consumption. This allows you to write procedural code in a busy loop, which is easy to understand and is what made arduino so successful to beginners.&lt;br&gt;On the ESP8266 on the contrary, you share CPU with the networking stack. Monopolize the CPU for too long and the network stack will crash. What’s more, by virtue of being wireless capable, ESP8266 applications are more likely to run off the grid, where battery life is critical; exit the busyloop model!&lt;/p&gt;
&lt;p&gt;I salute the effort that has been put in making the ESP8266 as compatible as possible with existing arduino APIs but I think that it is the wrong approach to solving the problem. As we will see next, &lt;strong&gt;it is much easier for Arduino enthusiasts to learn a framework tailored for the ESP8266, than it is for the ESP8266 to fit in the Arduino mold.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I am not saying you can’t use the Arduino stack. You can. But in my opinion you will be more productive and save time going directly for the NodeMCU stack.&lt;/p&gt;
&lt;h3 id=&#34;NodeMCU&#34;&gt;&lt;a href=&#34;#NodeMCU&#34; class=&#34;headerlink&#34; title=&#34;NodeMCU&#34;&gt;&lt;/a&gt;NodeMCU&lt;/h3&gt;&lt;p&gt;This is the way I recommend. NodeMCU is an ambitious idea perfectly put in practice by &lt;a href=&#34;https://github.com/nodemcu/nodemcu-firmware/graphs/contributors&#34;&gt;a group of talented programmers&lt;/a&gt;. It solves the problems the arduino-based solution faces while providing an extremely user-friendly environment.&lt;/p&gt;
&lt;p&gt;NodeMCU is an open source lua-based operating system for the ESP8266. It contains a lua runtime as well as binary modules to interface with the different hardware capabilities of the EPS8266. &lt;strong&gt;It is the best tradeoff between user-friendliness and resource efficiency I am aware of&lt;/strong&gt;. Its programming model is event-based (the API looks very much like that of Node.js), which makes it particularly efficient and suited for this chip. &lt;strong&gt;Despite being based on a scripting language (lua), I found it to run more stable than arduino applications written in C!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some people might be put off by having to learn lua. The fact is you do not need to know lua in order to use NodeMCU. You will mostly be copy-pasting snippets from the doc, and add a couple &lt;code&gt;function&lt;/code&gt;s and &lt;code&gt;if&lt;/code&gt; statements. The language is so easy to read and use that you can do basic modifications without any prior knowlege of it. Of course biggger modifications will require a bit of googling, but the time you spend learning lua is time you would spend working around limitations of the other solutions! Trust me, this is the way to go.&lt;/p&gt;
&lt;h2 id=&#34;Let’s-get-hacking&#34;&gt;&lt;a href=&#34;#Let’s-get-hacking&#34; class=&#34;headerlink&#34; title=&#34;Let’s get hacking!&#34;&gt;&lt;/a&gt;Let’s get hacking!&lt;/h2&gt;&lt;p&gt;Alright, at this point you should be equipped with a NodeMCU board and be convinced that the NodeMCU software is the way to go. If you have a more guerilla hardware setup, make sure you can talk to the board’s uart at the specified baud rate (115200), and that you drive the boot control pins appropriately (see &lt;a href=&#34;#Appendix-A-Boot-mode-selection&#34;&gt;appendix A&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;NodeMCU development is a two step process: First you load a firmware into the chip, then you write your application. Everything happens through the UART port of the chip.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;As usual, I provide a complete zip archive containing most of the stuff you’ll need for this tutorial, so you can follow along without interruption. &lt;a href=&#34;/assets/esp8266/nodemcu-tuto.zip&#34;&gt;Grab it with this link&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;Find-your-COM-port&#34;&gt;&lt;a href=&#34;#Find-your-COM-port&#34; class=&#34;headerlink&#34; title=&#34;Find your COM port&#34;&gt;&lt;/a&gt;Find your COM port&lt;/h3&gt;&lt;p&gt;After you’ve plugged your board to your computer, you will want to find the COM port connected to your ESP8266 chip. One easy way is to go into the arduino IDE, and look at the available options in &lt;em&gt;Tools&lt;/em&gt; &amp;gt; &lt;em&gt;Port&lt;/em&gt;. Otherwise on OSX, running  &lt;code&gt;ls /dev/cu.*&lt;/code&gt; will show the list of potential candidates. Just try each of them until you find the right one. &lt;em&gt;Let me the method you use on other platforms so I can add them here.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/esp8266/com_port_arduino.png&#34; alt=&#34;Finding the COM port using the arduino IDE.&#34;&gt;&lt;/p&gt;
&lt;p&gt;Select one at random, open the serial monitor (the magnifying glass icon on the top right). Make sure you select “115200 baud” and “both NL &amp;amp; CR” in the dropdown at the bottom of the screen. Then depending on what is currently flashed on the board, try either of these two commands: &lt;code&gt;print(node.info())&lt;/code&gt; or else just &lt;code&gt;AT&lt;/code&gt;. If the first one returns some numbers, then it means that the chip has already been flashed with a NodeMCU firmware (we are still going to replace it with our own). If the second command works, it means that the chip contains the default firmware by espressif (as discussed in the first section).&lt;/p&gt;
&lt;p&gt;If none of them works, try another serial port. It could also be that the chip currently contains garbage and is not able to run anything, or that you booted in “flash mode”. If you are running a bare ESP-XX module, make sure to drive the pins in “boot mode” as shown in &lt;a href=&#34;#Appendix-A-Boot-mode-selection&#34;&gt;appendix A&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/esp8266/info_command_arduino.png&#34; alt=&#34;Running a command to check that we are talking to an ESP module.&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now that you know which com port talks to the ESP8266, &lt;strong&gt;close the serial console&lt;/strong&gt;, go back to your terminal and save that value to a variable called &lt;code&gt;PORT&lt;/code&gt;. For instance, my port is &lt;code&gt;/dev/cu.usbmodem12341&lt;/code&gt; so I type:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;export PORT=&amp;quot;/dev/cu.usbmodem12341&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h3 id=&#34;Initial-setup&#34;&gt;&lt;a href=&#34;#Initial-setup&#34; class=&#34;headerlink&#34; title=&#34;Initial setup&#34;&gt;&lt;/a&gt;Initial setup&lt;/h3&gt;&lt;p&gt;There is one major drawback with NodeMCU: The complete image with all existing modules is too big to fit on the chip! Therefore, you need to select which modules you need for a given application and create a custom image with only these modules.&lt;br&gt;Fortunately, there are shortcuts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, &lt;a href=&#34;https://nodemcu-build.com/&#34;&gt;a cloud build service&lt;/a&gt; lets you generate custom images online. Just check the boxes you need, hit “Start your build” and within a few minutes you’ll get your image sent in your mail.&lt;/li&gt;
&lt;li&gt;Alternatively, you can grab a copy of the firmware containing a collection of the most essential modules curated by yours truely. You can &lt;a href=&#34;/assets/esp8266/nodemcu-essentials-2018-07-21-float.bin&#34;&gt;download it here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For this demo, just use the image I provide (second bullet above).&lt;/p&gt;
&lt;p&gt;We will flash the image using a handy python script named &lt;a href=&#34;https://github.com/espressif/esptool&#34;&gt;esptool.py&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;All flashing operations happen in “flash” mode. The commands will hang if the board is in “boot” mode. Refer to &lt;a href=&#34;#Appendix-A-Boot-mode-selection&#34;&gt;appendix A&lt;/a&gt; to learn more about boot modes.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First, erase the flash memory of the device by running:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;python esptool.py --port $PORT erase_flash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Now, reset your ESP8266 in flash mode again&lt;/strong&gt;, and proceed to flash the firmware:&lt;br&gt;(Note that at that point the chip will tend to reboot automatically in “bootloader mode”. It might take some patience to get it to reboot in flash mode. I found that I sometimes need to disconnect the chip from the power source, and hold the “flash” button down while I connect it back to power).&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;esptool.py --port $PORT write_flash -fm dio 0x00000 nodemcu-essentials-2018-05-02-float.bin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Tadaa! You can now reboot your board one more time, in “normal” mode. It is ready to use!&lt;/p&gt;
&lt;h3 id=&#34;Application-programming&#34;&gt;&lt;a href=&#34;#Application-programming&#34; class=&#34;headerlink&#34; title=&#34;Application programming&#34;&gt;&lt;/a&gt;Application programming&lt;/h3&gt;&lt;p&gt;From now on, we will use a program called &lt;a href=&#34;https://github.com/kmpm/nodemcu-uploader&#34;&gt;nodemcu-uploader&lt;/a&gt; to interact with the chip. Install it or just clone the repository somewhere. Test your setup with &lt;code&gt;nodemcu-uploader --version&lt;/code&gt; (note: if you cloned the repo, you might need to &lt;code&gt;python /path/to/nodemcu-uploader.py --version&lt;/code&gt; instead).&lt;/p&gt;
&lt;h4 id=&#34;Exploring-the-interactive-prompt&#34;&gt;&lt;a href=&#34;#Exploring-the-interactive-prompt&#34; class=&#34;headerlink&#34; title=&#34;Exploring the interactive prompt&#34;&gt;&lt;/a&gt;Exploring the interactive prompt&lt;/h4&gt;&lt;p&gt;NodeMCU exposes a command prompt on its serial port which you can use to run arbitrary lua code on the chip. &lt;code&gt;nodemcu-uploader&lt;/code&gt; actually uses this interface to interact with the chip. Let’s open an interactive terminal with the chip to get a sense of how this works. Make sure you still have the &lt;code&gt;PORT&lt;/code&gt; variable around, then run &lt;code&gt;nodemcu-uploader --port $PORT terminal&lt;/code&gt;. This should open a terminal connected to your board!&lt;/p&gt;
&lt;p&gt;Try the following command:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;print(&amp;#x27;Hello world&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The device should respond by printing the string ‘Hello world’. Awesome! Now how about we do a little bit of wifi?&lt;/p&gt;
&lt;p&gt;Put your chip in &lt;code&gt;station&lt;/code&gt; mode with:&lt;/p&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;wifi.setmode(wifi.STATION)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Then enter this to get a list of available wifi networks (it takes a few seconds to load).&lt;/p&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;wifi.sta.getap(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(t)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; k,v &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;pairs&lt;/span&gt;(t) &lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(k..&lt;span class=&#34;string&#34;&gt;&amp;quot; : &amp;quot;&lt;/span&gt;..v)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now configure the chip to connect to your wifi network with the following command:&lt;/p&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;wifi.sta.&lt;span class=&#34;built_in&#34;&gt;config&lt;/span&gt;(&amp;#123;ssid = &lt;span class=&#34;string&#34;&gt;&amp;#x27;YOUR_WIFI_NETWORK_NAME&amp;#x27;&lt;/span&gt;, pwd = &lt;span class=&#34;string&#34;&gt;&amp;#x27;YOUR_WIFI_PASSWORD&amp;#x27;&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Wait for a dozen seconds to give it time to connect, and then confirm that you are online using the following command:&lt;/p&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(wifi.sta.getip())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If this shows ‘nil’, it means that the NodeMCU did not succesfully connect. Check your wifi password or give it some more time&lt;/p&gt;
&lt;p&gt;Now that our piece of awesomness is connected to the internet, let’s make some HTTP requests!&lt;/p&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;http.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;https://istheinternetdown.com/&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(code, data)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (code &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;HTTP request failed&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(code, data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You should get a response telling you that the internet is not down (hopefully) and return your public IP address.&lt;/p&gt;
&lt;p&gt;You can now quit the interactive session. (Note that this terminal’s retarded exit sequence is “CTRL+]”. If you are using a non-US keyboard use CTRL + &lt;em&gt;whatever key is next to the return key&lt;/em&gt;)&lt;/p&gt;
&lt;h4 id=&#34;Uploading-a-real-program&#34;&gt;&lt;a href=&#34;#Uploading-a-real-program&#34; class=&#34;headerlink&#34; title=&#34;Uploading a real program&#34;&gt;&lt;/a&gt;Uploading a real program&lt;/h4&gt;&lt;p&gt;Now that you have a sense of how the NodeMCU terminal interface works, let’s write a real program and upload it to the board.&lt;/p&gt;
&lt;p&gt;First, create a file called &lt;code&gt;env.lua&lt;/code&gt;. This file will contain your wifi credentials (this is useful to avoid checking secret credentials in source control).&lt;/p&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- env.lua&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;WIFI_SSID=&lt;span class=&#34;string&#34;&gt;&amp;quot;YOUR_NETWORK_NAME&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;WIFI_PASSWORD=&lt;span class=&#34;string&#34;&gt;&amp;quot;YOUR_NETWORK_PASSWORD&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Then copy the following program into a file called &lt;code&gt;init.lua&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- init.lua&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- Loads the WIFI_NETWORK and WIFI_PASSWORD secret variables&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;dofile&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;env.lua&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- Connect to the wifi network&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;wifi.setmode(wifi.STATION)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;wifi.sta.&lt;span class=&#34;built_in&#34;&gt;config&lt;/span&gt;(&amp;#123;ssid = WIFI_SSID, pwd = WIFI_PASSWORD&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- index of the gpio connected to the onboard LED&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LED_PIN=&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gpio.mode(LED_PIN, gpio.OUTPUT)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gpio.&lt;span class=&#34;built_in&#34;&gt;write&lt;/span&gt;(LED_PIN, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- This will print IP informations upon successful connection&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;wifi.eventmon.register(wifi.eventmon.STA_GOT_IP, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(T)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;\n\tSTA - GOT IP&amp;#x27;&lt;/span&gt;..&lt;span class=&#34;string&#34;&gt;&amp;#x27;\n\tStation IP: &amp;#x27;&lt;/span&gt;..T.IP..&lt;span class=&#34;string&#34;&gt;&amp;#x27;\n\tSubnet mask: &amp;#x27;&lt;/span&gt;..&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    T.netmask..&lt;span class=&#34;string&#34;&gt;&amp;#x27;\n\tGateway IP: &amp;#x27;&lt;/span&gt;..T.gateway)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- Create a TCP server&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sv = net.createServer(net.TCP, &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;headers = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Content-Type: text/html; charset=UTF-8\r\n&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- Configure the server to print the data it gets and respond&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- with a greeting message&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; sv &lt;span class=&#34;keyword&#34;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  sv:listen(&lt;span class=&#34;number&#34;&gt;80&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(conn)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    conn:on(&lt;span class=&#34;string&#34;&gt;&amp;#x27;receive&amp;#x27;&lt;/span&gt;, receiver)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;receiver&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(sck, data)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    firstLine = &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;sub&lt;/span&gt;(data, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(data, &lt;span class=&#34;string&#34;&gt;&amp;#x27;\n&amp;#x27;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    message = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;match&lt;/span&gt;(firstLine, &lt;span class=&#34;string&#34;&gt;&amp;#x27;GET /on &amp;#x27;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        message = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;lt;pre&amp;gt;turned on!&amp;lt;/pre&amp;gt;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        gpio.&lt;span class=&#34;built_in&#34;&gt;write&lt;/span&gt;(LED_PIN, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;-- Note that the led shows the inverse of the logic state of the gpio&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;elseif&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;match&lt;/span&gt;(firstLine, &lt;span class=&#34;string&#34;&gt;&amp;#x27;GET /off &amp;#x27;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        message = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;lt;pre&amp;gt;turned off!&amp;lt;/pre&amp;gt;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        gpio.&lt;span class=&#34;built_in&#34;&gt;write&lt;/span&gt;(LED_PIN, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;match&lt;/span&gt;(firstLine, &lt;span class=&#34;string&#34;&gt;&amp;#x27;GET /&amp;#x27;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; message ~= &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sck:send(&lt;span class=&#34;string&#34;&gt;&amp;#x27;HTTP/1.1 200 OK\r\n&amp;#x27;&lt;/span&gt;.. headers .. &lt;span class=&#34;string&#34;&gt;&amp;#x27;\r\n&amp;#x27;&lt;/span&gt;..&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;lt;h1&amp;gt;Hello from ESP8266!&amp;lt;/h1&amp;gt;&amp;#x27;&lt;/span&gt; ..&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                message ..&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;lt;a href=&amp;quot;/on&amp;quot;&amp;gt;Turn light on&amp;lt;/a&amp;gt; - &amp;lt;a href=&amp;quot;/off&amp;quot;&amp;gt;Turn light off&amp;lt;/a&amp;gt;&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sck:send(&lt;span class=&#34;string&#34;&gt;&amp;#x27;HTTP/1.1 404 NOT FOUND\r\n&amp;#x27;&lt;/span&gt;.. headers .. &lt;span class=&#34;string&#34;&gt;&amp;#x27;\r\n&amp;#x27;&lt;/span&gt;..&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;#x27;Not found.&amp;lt;br/&amp;gt;&amp;lt;a href=&amp;quot;/&amp;quot;&amp;gt;Go back home&amp;lt;/a&amp;gt;&amp;#x27;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sck:on(&lt;span class=&#34;string&#34;&gt;&amp;#x27;sent&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; sck:&lt;span class=&#34;built_in&#34;&gt;close&lt;/span&gt;() &lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Finally, upload both files to the board using nodemcu-uploader:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;nodemcu-uploader --port $PORT upload env.lua init.lua&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;When you reboot your board, it will look for the file called “init.lua” and run that program. It is useful for debugging purposes to connect to the terminal with &lt;code&gt;nodemcu-uploader --port $PORT terminal&lt;/code&gt; while your board is booting. This shows a bunch of info as well as any &lt;code&gt;print&lt;/code&gt; statement you put in your code.&lt;/p&gt;
&lt;p&gt;Here is what I got:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;--- Miniterm on /dev/cu.usbmodem12341  115200,8,N,1 ---&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;--- Quit: Ctrl+] | Menu: Ctrl+T | Help: Ctrl+T followed by Ctrl+H ---&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[some redacted garbage characters. This is a normal behavior of the ESP8266]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;NodeMCU custom build by frightanic.com&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	branch: master&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	commit: 8181c3be7aed9f0a0ceb73ac8137c1a519e8a8e9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	SSL: true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	modules: cron,enduser_setup,file,gpio,http,i2c,mdns,mqtt,net,node,pwm,rtcfifo,rtcmem,rtctime,sjson,sntp,tmr,uart,wifi,tls&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; build created on 2018-07-21 18:02&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; powered by Lua 5.1.4 on SDK 2.2.1(cfd48f3)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	STA - GOT IP&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Station IP: 192.168.0.22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Subnet mask: 255.255.255.0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Gateway IP: 192.168.0.1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now to test your program, take note of the “Station IP” you get and navigate there with your web browser. In my case for instance, I have to navigate to &lt;code&gt;http://192.168.0.22&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;video-container&#34;&gt;&lt;iframe src=&#34;https://www.youtube.com/embed/eQv8UEOR8qE&#34; frameborder=&#34;0&#34; loading=&#34;lazy&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Excuse messy breadboard. None of it would have been necessary had I simply bought the NodeMCU devkit. Hopefully I made this mistake so you won’t have to.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This test program lets you control the onboard LED through an HTML interface. Note that I tested this with the ESP-07. It should also work with the ESP-12 as well as any ESP-XX based NodeMCU board where the onboard LED is connected to &lt;code&gt;GPIO2&lt;/code&gt;. Other hardware may have the LED connected to a different pin or not have an LED at all.&lt;/p&gt;
&lt;h2 id=&#34;You-are-on-your-own-now&#34;&gt;&lt;a href=&#34;#You-are-on-your-own-now&#34; class=&#34;headerlink&#34; title=&#34;You are on your own now&#34;&gt;&lt;/a&gt;You are on your own now&lt;/h2&gt;&lt;p&gt;That’s it for this tutorial. You now know the basics of the ESP8266 and have a complete development setup that allows you to write any IoT application! Let me give you some additional resources and tips before you leave:&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://nodemcu.readthedocs.io/en/master/en/modules/gpio/#gpiomode&#34;&gt;nodemcu documentation&lt;/a&gt; is your ultimate resource to learn all of the NodeMCU APIs. It is extremely powerful and I found it to be generally intuitive to use. That being said, keep in mind that when you run an application on the ESP8266, you are pushing it to its limits. Besides the network stack, it has very limited features and processing power. Even basic HTTP stuff is poorly supported. I advise you use [MQTT](TODO link) instead, a messaging protocol adapted to IoT applications. &lt;a href=&#34;&#34;&gt;It is possible to run an HTTP application server on the ESP8266&lt;/a&gt; but that is a complete abuse of the chip and should never be attempted in an application you intend to deploy.&lt;/p&gt;
&lt;p&gt;In case you do not want to put all of the pieces together yourself, or if you get stuck somewhere, I provide the “works for me” package: a zip archive containing everything you need to run the experiments shown in this tutorial.&lt;/p&gt;
&lt;p&gt;The archive also contains a Makefile which contains helpful tasks for NodeMCU development.&lt;/p&gt;
&lt;p&gt;I still can not believe the amount of features that come with the ESP8266 as such a low price tag. The NodeMCU stack is like icing on the cake to me as it makes the programming part of such projects a blast! I feel inspired to build lots of IoT stuff and I hope it you do too.&lt;br&gt;I invite you to check out the &lt;a href=&#34;https://github.com/hmil/betta-feeder&#34;&gt;fish feeder&lt;/a&gt; I built for my betta. Originally piloted by an arduino, I was able to make it more failure tolerant and enhance its logging capabilities by replacing the arduino with an ESP8266!&lt;/p&gt;
&lt;p&gt;And you, what do you want to build with your ESP8266? I’d love to hear your ideas! Feel free to get in touch or share your thoughts in the comment section.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;Appendix&#34;&gt;&lt;a href=&#34;#Appendix&#34; class=&#34;headerlink&#34; title=&#34;Appendix&#34;&gt;&lt;/a&gt;Appendix&lt;/h2&gt;&lt;h3 id=&#34;Appendix-A-Boot-mode-selection&#34;&gt;&lt;a href=&#34;#Appendix-A-Boot-mode-selection&#34; class=&#34;headerlink&#34; title=&#34;Appendix A: Boot mode selection&#34;&gt;&lt;/a&gt;Appendix A: Boot mode selection&lt;/h3&gt;&lt;p&gt;The following table shows how to select the mode into which the ESP8266 boots. Note that in all cases, GPIO15 must be pulled &lt;strong&gt;down&lt;/strong&gt; and GPIO2 must be pulled &lt;strong&gt;high&lt;/strong&gt;. Some boards, such as the NodeMCU, take care of this for you. Otherwise, use 10k resistors to drive the pins.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Mode&lt;/th&gt;
&lt;th&gt;NodeMCU devkit&lt;/th&gt;
&lt;th&gt;ESP-XX or others&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;boot&lt;/td&gt;
&lt;td&gt;press &lt;strong&gt;rst&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Pull GPIO0 &lt;strong&gt;up&lt;/strong&gt; with a resistor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flash&lt;/td&gt;
&lt;td&gt;hold &lt;strong&gt;flash&lt;/strong&gt; and press &lt;strong&gt;rst&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Bring GPIO0 &lt;strong&gt;down&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</description>
        </item>
        <item>
            <guid isPermalink="true">https://code.hmil.fr/2018/05/How-not-to-suck-at-github/</guid>
            <title>How not to suck at GitHub</title>
            <link>https://code.hmil.fr/2018/05/How-not-to-suck-at-github/</link>
            <category>rant</category>
            <category>GitHub</category>
            <pubDate>Mon, 28 May 2018 22:00:00 +0200</pubDate>
            <description>&lt;p&gt;So you learned a bit of programming and you know how to use git. You are ready to materialize your thoughts through the mighty power of code, and make your art available to the whole world using the most popular open source social network on earth.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;But you fear that you will make stupid mistakes and ruin your chance to become the next tech influencer. Rest assured, after reading this post you will know everything you need to know to make the most of Octocat’s home.&lt;/p&gt;
&lt;p&gt;I will give you 10 tips to make it to the top faster than &lt;a href=&#34;https://en.wikipedia.org/wiki/Pemba_Dorje&#34;&gt;Pemba Dorje&lt;/a&gt; on oxygen!&lt;/p&gt;
&lt;h2 id=&#34;1-Don’t-look-for-alternatives&#34;&gt;&lt;a href=&#34;#1-Don’t-look-for-alternatives&#34; class=&#34;headerlink&#34; title=&#34;1. Don’t look for alternatives&#34;&gt;&lt;/a&gt;1. Don’t look for alternatives&lt;/h2&gt;&lt;p&gt;If you think of a novel utility, library or a plug-in, you need to start coding your own solution straight away.&lt;/p&gt;
&lt;p&gt;You will only lose time looking for alternatives. You will find that prior art does not quite fit your requirements. Of course, you can not bend your problem definition, even sligthly, so that existing solutions apply. Moreover, during this process you may taint your original idea by looking at too many similar concepts, which will invariably worsen your design.&lt;/p&gt;
&lt;p&gt;It would also be a huge waste of time trying to add a feature to an existing project. The legacy codebase of established projects is massive and messy. Just learning the relevant bits would take as much time as coding the whole solution from scratch anyway. And I’m not even talking about the near-infinite number of hours of work lost in feature requests which end up being rejected by the project owner after 3 months of silence.&lt;/p&gt;
&lt;h2 id=&#34;2-Google-and-StackOverflow-won’t-help-you&#34;&gt;&lt;a href=&#34;#2-Google-and-StackOverflow-won’t-help-you&#34; class=&#34;headerlink&#34; title=&#34;2. Google and StackOverflow won’t help you&#34;&gt;&lt;/a&gt;2. Google and StackOverflow won’t help you&lt;/h2&gt;&lt;p&gt;Don’t waste your precious time googling for a solution. Most of the answers on StackOverflow are garbage anyway, and the library you are working with (and which is the root cause of your current issue of course) is not that popular. Hence, chances of finding the exact solution to your problem online are minimal.&lt;/p&gt;
&lt;p&gt;Instead, you better bother that project maintainer whose lack of QA considerations is causing your troubles. The project maintainer has the mental map of his project engraved in his memory at all times and can therefore figure out the solution to any problem near instantly. Plus, I suspect projet maintainers keep a secret list of known issues which they do not fix out of pure laziness, and that they actually wait until someone notices it to fix it.&lt;/p&gt;
&lt;h2 id=&#34;3-Don’t-try-to-fix-it-yourself&#34;&gt;&lt;a href=&#34;#3-Don’t-try-to-fix-it-yourself&#34; class=&#34;headerlink&#34; title=&#34;3. Don’t try to fix it yourself&#34;&gt;&lt;/a&gt;3. Don’t try to fix it yourself&lt;/h2&gt;&lt;p&gt;This tip is similar to number 2. If a project you are using doesn’t work, it’s probably the maintainer’s fault. Don’t even bother looking for an answer in the project wiki or investigating the bug yourself. Just go ahead and nag the project maintainer. He or she will probably be able to fix their buggy project just for you.&lt;br&gt;Don’t forget to check back each day and notify the maintainer if he forgot to respond to your last message.&lt;/p&gt;
&lt;h2 id=&#34;4-Be-as-vague-as-possible&#34;&gt;&lt;a href=&#34;#4-Be-as-vague-as-possible&#34; class=&#34;headerlink&#34; title=&#34;4. Be as vague as possible&#34;&gt;&lt;/a&gt;4. Be as vague as possible&lt;/h2&gt;&lt;p&gt;When you open an issue for a bug you’ve encountered (which should be about 2 minutes after you’ve noticed said bug if you follow the advice above), please do yourself a favor and describe your issue in as vague terms as possible. Don’t try to assess the cause of your problem. This way you avoid making a bad diagnosis and mislead the maintainer. Also, don’t post a snippet of your own code, system stats or installed libraries as it may leak sensitive information out to the public (remember hackers are constantly scraping GitHub for sensitive information!).&lt;/p&gt;
&lt;h2 id=&#34;5-Don’t-bother-with-the-markup&#34;&gt;&lt;a href=&#34;#5-Don’t-bother-with-the-markup&#34; class=&#34;headerlink&#34; title=&#34;5. Don’t bother with the markup&#34;&gt;&lt;/a&gt;5. Don’t bother with the markup&lt;/h2&gt;&lt;p&gt;You’ve heard about &lt;a href=&#34;https://en.wikipedia.org/wiki/Markdown#Example&#34;&gt;markdown&lt;/a&gt; but for your own sake, you couldn’t remember how to format code. Is it a &amp;lt;code&amp;gt; tag? Or maybe [code]? Or is it a back tick? Damn it!&lt;/p&gt;
&lt;p&gt;Don’t worry, no one does. Just forget about formatting your issue altogether. Paste large blobs of code inline with your prose like you’re writing lyrics for the next trap banger. After all, if the maintainer is not happy with your format, he can copy and paste it to a text editor.&lt;br&gt;As a bonus, you don’t even need to indent your code when you proceed this way!&lt;/p&gt;
&lt;h2 id=&#34;6-Refrain-from-using-reactions&#34;&gt;&lt;a href=&#34;#6-Refrain-from-using-reactions&#34; class=&#34;headerlink&#34; title=&#34;6. Refrain from using reactions&#34;&gt;&lt;/a&gt;6. Refrain from using reactions&lt;/h2&gt;&lt;p&gt;It is outrageous that the GitHub team spent so much effort mimicking facebook with its stupid “reactions”. Ugh… Anyway, when you feel like you agree (or even disagree) with a comment, be respectful and post an additional comment to voice your opinion while adding absolutely no useful piece of information to the debate. And please, please, please, leave that stupid “thumbs up” button for social-network addicted kids.&lt;/p&gt;
&lt;h2 id=&#34;7-DO-NOT-ever-submit-a-pull-request&#34;&gt;&lt;a href=&#34;#7-DO-NOT-ever-submit-a-pull-request&#34; class=&#34;headerlink&#34; title=&#34;7. DO NOT, ever, submit a pull request&#34;&gt;&lt;/a&gt;7. DO NOT, ever, submit a pull request&lt;/h2&gt;&lt;p&gt;Everyone knows project maintainers hate it when someone tries to touch their code. After all, why are they constantly finding excuses to reject pull requests?&lt;br&gt;Also, in order to preserve your ever so precious time, and avoid a painful public shaming, do not attempt to contribute code to an open source project.&lt;/p&gt;
&lt;h2 id=&#34;8-If-you-ever-should-submit-code-don’t-ask&#34;&gt;&lt;a href=&#34;#8-If-you-ever-should-submit-code-don’t-ask&#34; class=&#34;headerlink&#34; title=&#34;8. If you ever should submit code, don’t ask!&#34;&gt;&lt;/a&gt;8. If you ever should submit code, don’t ask!&lt;/h2&gt;&lt;p&gt;Let’s say there is this extremely useful feature you need, and the project seems a bit inactive lately. You &lt;strong&gt;really&lt;/strong&gt; crave that feature and you can’t wait for Mr. slowpoke to code it himself. Despite point 1, you do not have time to write new software from scratch. You realize that it will be a substantial change which will require quite a bit of code, but nothing can discourage you. You &lt;strong&gt;need&lt;/strong&gt; that feature.&lt;/p&gt;
&lt;p&gt;Then make sure to secretly develop the feature without letting the maintainer know; otherwise, he or she might try to cut the grass under your feet. Don’t let anyone know you are working on this awesome addition until the very last moment when you submit your huge pull request as a single, solid, code change. &lt;em&gt;Wow&lt;/em&gt; factor guaranteed!&lt;/p&gt;
&lt;h2 id=&#34;9-Do-not-answer-other-people’s-questions&#34;&gt;&lt;a href=&#34;#9-Do-not-answer-other-people’s-questions&#34; class=&#34;headerlink&#34; title=&#34;9. Do not answer other people’s questions&#34;&gt;&lt;/a&gt;9. Do not answer other people’s questions&lt;/h2&gt;&lt;p&gt;As you contribute to repositories, you will notice other people try to drown your hard work under a deluge of irrelevant issues and comments. Don’t think helping them will make them go away; they will invariably come back with more.&lt;/p&gt;
&lt;p&gt;Instead, keep a cool head and refrain from helping. If needed, “up” your own issue to make sure it stays on top.&lt;/p&gt;
&lt;h2 id=&#34;10-Use-issues-as-a-general-purpose-Q-amp-A-place&#34;&gt;&lt;a href=&#34;#10-Use-issues-as-a-general-purpose-Q-amp-A-place&#34; class=&#34;headerlink&#34; title=&#34;10. Use issues as a general purpose Q&amp;amp;A place&#34;&gt;&lt;/a&gt;10. Use issues as a general purpose Q&amp;amp;A place&lt;/h2&gt;&lt;p&gt;As we’ve covered in point number 2, you will not find answers on StackOverflow. What’s more, its elevator system tends to reorder comments in an annoying way which breaks chronological order.  &lt;/p&gt;
&lt;p&gt;Therefore, if you have anything to say which is even remotely connected to a project, then go ahead and express yourself using the issues section. This will notify &lt;strong&gt;everyone&lt;/strong&gt; who watches the repository and guarantee maximum exposure of your comment.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Hope you liked these tips. Please feel free to contribute your own in the comments!&lt;/p&gt;
</description>
        </item>
        <item>
            <guid isPermalink="true">https://code.hmil.fr/2018/05/TypeScript-project-structure2/</guid>
            <title>How to manage and publish a multi-package TypeScript project</title>
            <link>https://code.hmil.fr/2018/05/TypeScript-project-structure2/</link>
            <category>TypeScript</category>
            <category>monorepo</category>
            <category>architecture</category>
            <pubDate>Mon, 14 May 2018 17:00:00 +0200</pubDate>
            <description>&lt;p&gt;In the &lt;a href=&#34;/2018/03/TypeScript-project-structure/&#34;&gt;previous part&lt;/a&gt;, we’ve seen a few tricks which can help you split your TypeScript project into small packages. We were still missing a proper build system as well as a way to publish or deploy the packages. Which is what we will cover in this chapter.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;To-follow-along&#34;&gt;&lt;a href=&#34;#To-follow-along&#34; class=&#34;headerlink&#34; title=&#34;To follow along&#34;&gt;&lt;/a&gt;To follow along&lt;/h2&gt;&lt;p&gt;As in the previous part, I have created a simple repository which you can use to follow along this tutorial. This time however, you must first run a script to customize the project before you can start using the repository. The reason is that at the end of this tutorial, you will be able to publish your project to npm. In order to make this work for everyone, we have to rename the packages with a prefix which is unique to each reader of this tutorial. Don’t worry, it only takes a second:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download the archive &lt;a href=&#34;https://github.com/hmil/ts-seed-project/archive/part2.zip&#34;&gt;for part 2&lt;/a&gt;, and unzip it somewhere.&lt;/li&gt;
&lt;li&gt;If you haven’t already, &lt;a href=&#34;https://www.npmjs.com/signup&#34;&gt;sign up&lt;/a&gt; to npm and &lt;a href=&#34;https://docs.npmjs.com/cli/adduser&#34;&gt;log in&lt;/a&gt; using the command line. Or, if you don’t care about publishing to npm, go straight to &lt;em&gt;4&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;In the project, run &lt;code&gt;./customize.sh&lt;/code&gt;. If it worked, you can skip step 4.&lt;/li&gt;
&lt;li&gt;Otherwise, run the script like so: &lt;code&gt;./customize.sh username&lt;/code&gt;, where &lt;em&gt;username&lt;/em&gt; is any username you picked. Beware that you will not be able to publish the packages. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Alternatively, if you do not wish to download the files, you can read the &lt;a href=&#34;https://github.com/hmil/ts-seed-project/compare/part1...part2&#34;&gt;diff on github&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Build-system&#34;&gt;&lt;a href=&#34;#Build-system&#34; class=&#34;headerlink&#34; title=&#34;Build system&#34;&gt;&lt;/a&gt;Build system&lt;/h2&gt;&lt;p&gt;You may have noticed a new file called &lt;code&gt;Makefile&lt;/code&gt; at the top of the project. Indeed, we use &lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;GNU Make&lt;/a&gt; to keep track of dependencies between packages and to define build tasks, and this file is where we tell &lt;em&gt;Make&lt;/em&gt; what to do. If you do happen to know a better alternative than &lt;em&gt;Make&lt;/em&gt;, please express yourself in the comments.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Make&lt;/em&gt; is installed by default on any decent operating system. If you are using windows, you can easily find instructions online to install it.  &lt;/p&gt;
&lt;p&gt;The top-level Makefile defines three things: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;global tasks&lt;/li&gt;
&lt;li&gt;dependencies&lt;/li&gt;
&lt;li&gt;utility tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Global-tasks&#34;&gt;&lt;a href=&#34;#Global-tasks&#34; class=&#34;headerlink&#34; title=&#34;Global tasks&#34;&gt;&lt;/a&gt;Global tasks&lt;/h3&gt;&lt;p&gt;Global tasks are tasks which must run in all packages. They are defined in this line:&lt;/p&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;TASKS :=build clean test&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;For instance, the &lt;code&gt;build&lt;/code&gt; task will build all packages at once. To run it, type:&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;make build	&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You will notice that this command also installs npm dependencies, and that it builds the packages in the correct order! Make did not &lt;em&gt;magically&lt;/em&gt; figure this out, &lt;em&gt;we&lt;/em&gt; instructed it to do so. Keep reading to find out how.&lt;/p&gt;
&lt;h3 id=&#34;Dependencies&#34;&gt;&lt;a href=&#34;#Dependencies&#34; class=&#34;headerlink&#34; title=&#34;Dependencies&#34;&gt;&lt;/a&gt;Dependencies&lt;/h3&gt;&lt;p&gt;Dependency declaration is the easiest and most useful thing with &lt;em&gt;Make&lt;/em&gt;. Simply write the path to the dependent, followed by a colon, followed by a space-separated list of dependencies.&lt;br&gt;For instance, the dependencies between our packages are defined like so:&lt;/p&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;packages/tstuto-api:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;packages/tstuto-server: packages/tstuto-api&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;packages/tstuto-web-client: packages/tstuto-api&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This is how Make knows in which order to build our packages. But how does it know to install npm dependencies first?&lt;/p&gt;
&lt;p&gt;Open the Makefile in &lt;code&gt;tstuto-web-client&lt;/code&gt;, which looks something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;BIN=public/dist/main.js&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SRC =&lt;span class=&#34;variable&#34;&gt;$(&lt;span class=&#34;built_in&#34;&gt;shell&lt;/span&gt; find src/ -type f -name &amp;#x27;*.ts&amp;#x27;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;NODE_MODULES=node_modules/.makets&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;NPM_TASKS=test clean&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;span class=&#34;meta-keyword&#34;&gt;.PHONY&lt;/span&gt;: build&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;build: &lt;span class=&#34;variable&#34;&gt;$(BIN)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$(NODE_MODULES)&lt;/span&gt;: package.json package-lock.json&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	npm install&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	touch &lt;span class=&#34;variable&#34;&gt;$(NODE_MODULES)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$(BIN)&lt;/span&gt;: &lt;span class=&#34;variable&#34;&gt;$(NODE_MODULES)&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$(SRC)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	npm run build&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;span class=&#34;meta-keyword&#34;&gt;.PHONY&lt;/span&gt;: $(NPM_TASKS)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$(NPM_TASKS)&lt;/span&gt;: &lt;span class=&#34;variable&#34;&gt;$(NODE_MODULES)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	npm run &lt;span class=&#34;variable&#34;&gt;$@&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;BIN&lt;/code&gt; variable contains the path to the output file of our package (in this case, it is the client-side javascript bundle).&lt;br&gt;We create a special file inside the node_modules directory, called &lt;code&gt;.makets&lt;/code&gt; (which stands for &lt;em&gt;make TimeStamp&lt;/em&gt;). This file records the last time that make ran &lt;code&gt;npm install&lt;/code&gt; and helps it figure out if it should run the command again (that is, when either &lt;code&gt;package.json&lt;/code&gt; or &lt;code&gt;package-lock.json&lt;/code&gt; has changed).&lt;/p&gt;
&lt;p&gt;Some tasks are defined in the &lt;em&gt;script&lt;/em&gt; property of the &lt;code&gt;package.json&lt;/code&gt; and do not need any additional logic in the Makefile. We define those in the &lt;em&gt;NPM_TASKS&lt;/em&gt; variable which is used to run the npm script of the same name.&lt;/p&gt;
&lt;h3 id=&#34;Utility-tasks&#34;&gt;&lt;a href=&#34;#Utility-tasks&#34; class=&#34;headerlink&#34; title=&#34;Utility tasks&#34;&gt;&lt;/a&gt;Utility tasks&lt;/h3&gt;&lt;p&gt;Let’s go back to the top-level Makefile quickly to talk about utility tasks.&lt;/p&gt;
&lt;p&gt;You might encounter repetitive tasks which are specific to one package and cannot be generalized to all packages. For instance, we want a task to start our development server. Such tasks can be defined individually in the top-level Makefile like so:&lt;/p&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;span class=&#34;meta-keyword&#34;&gt;.PHONY&lt;/span&gt;: serve&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;serve:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;variable&#34;&gt;$(MAKE)&lt;/span&gt; build&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;variable&#34;&gt;$(MAKE)&lt;/span&gt; -C packages/tstuto-server serve&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Here we simply create a proxy-task which delegates to the makefile located in &lt;code&gt;packages/tstuto-server&lt;/code&gt;. &lt;/p&gt;
&lt;!-- You may be wondering why this task explicitly invokes `make build` instead of defining a dependency on `build`. That is where we reach the limits of Make. Simply put, we cannot depend on global tasks because we used a hack to declare them. The hack itself is at the end of the Makefile but it is not worth discussing in this tutorial.
--&gt;
&lt;hr&gt;
&lt;p&gt;That is about it for the build system. If you are familiar with Make, nothing should have surprised you in the above (except maybe the way we declare the dependencies for &lt;code&gt;npm install&lt;/code&gt;). Otherwise, the syntax might look daunting at first, but you’ll quickly get used to it.&lt;/p&gt;
&lt;p&gt;Without further ado, let’s see how we solve the last remaining problem: &lt;strong&gt;publishing&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Publishing-Deployment&#34;&gt;&lt;a href=&#34;#Publishing-Deployment&#34; class=&#34;headerlink&#34; title=&#34;Publishing/Deployment&#34;&gt;&lt;/a&gt;Publishing/Deployment&lt;/h2&gt;&lt;p&gt;The setup we have right now is great for development, but you may be wondering: “How do I deploy this to production?” or “How do I publish this as npm packages?”. Fear not, the answer lies right below!&lt;/p&gt;
&lt;p&gt;You could of course clone your whole repository to your production environment and run &lt;code&gt;make serve&lt;/code&gt;. That would work but it would also be quite unprofessional to proceed this way.&lt;/p&gt;
&lt;p&gt;A more idiomatic way to proceed is to publish your packages to an &lt;strong&gt;artifact repository&lt;/strong&gt;. Open source projects usually rely on npm’s public repository while proprietary software editors have their own private artifact servers. Luckily for us, this means that no matter what you are currently trying to do, whether it’s an open or closed source, whether it’s a library, a microservice or a CLI tool, the process to publish it is exactly the same!&lt;/p&gt;
&lt;p&gt;Let’s recap what we want to do before digging into the details: We want to take all of our packages, give them appropriate version numbers and publish them using npm.&lt;br&gt;Oh, and one more detail: When they get published, our packages need to declare their dependencies to sibling packages in our project (because within the artifact repository, each package stands alone).&lt;/p&gt;
&lt;p&gt;All the magic happens inside &lt;code&gt;tools/publish.ts&lt;/code&gt;. This script does the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Determines the next version number&lt;/li&gt;
&lt;li&gt;Changes all &lt;code&gt;package.json&lt;/code&gt; files of all packages to set the correct version number&lt;/li&gt;
&lt;li&gt;Adds the missing dependencies to each &lt;code&gt;package.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Performs a &lt;code&gt;npm publish&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Rolls back the changes made in the &lt;code&gt;package.json&lt;/code&gt; files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will not dive into the details of this script and I would not advise you to reuse it as-is for your own projects. Instead, you should try it out and understand how it works so you can apply this knowledge to your specific use-case.&lt;/p&gt;
&lt;p&gt;We call this script from the &lt;code&gt;Makefile&lt;/code&gt;. Run it with the following command:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;make publish&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;If you are currently logged into npm, this will effectively publish the demo package to &lt;code&gt;@username/tstuto-xxx&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can now test your newly-deployed package by running:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm install -g @username/tstuto-server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;(Make sure to replace &lt;em&gt;username&lt;/em&gt; with your actual npm username. You may need to run this command with &lt;code&gt;sudo&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;And then, start your server by running:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;my-awesome-app&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This should start the application.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Well done! If you made it so far, you now know the key elements to manage a multi-package TypeScript project, develop it and publish it (or ship it for production).&lt;/p&gt;
&lt;h2 id=&#34;Bonus&#34;&gt;&lt;a href=&#34;#Bonus&#34; class=&#34;headerlink&#34; title=&#34;Bonus&#34;&gt;&lt;/a&gt;Bonus&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Make&lt;/code&gt; can run multiple tasks in parallel in a way that is consistent with the dependencies declared in the makefile. For instance, to run up to 4 tasks in parallel, run &lt;code&gt;make -j4 build&lt;/code&gt;. This can help you speed up builds when you have many packages and a flat dependency tree.&lt;/p&gt;
</description>
        </item>
        <item>
            <guid isPermalink="true">https://code.hmil.fr/2018/03/TypeScript-project-structure/</guid>
            <title>Tips and tricks to structure multi-package TypeScript projects</title>
            <link>https://code.hmil.fr/2018/03/TypeScript-project-structure/</link>
            <category>TypeScript</category>
            <category>monorepo</category>
            <category>architecture</category>
            <pubDate>Mon, 26 Mar 2018 17:00:00 +0200</pubDate>
            <description>&lt;p&gt;I’ve been experimenting with ways to structure a complex TypeScript project lately while working on &lt;a href=&#34;https://github.com/lbarman/vaultage&#34;&gt;Vaultage&lt;/a&gt; and I have finally found a solution that provides proper isolation and consistency across packages.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Java developers should be familiar with having dozens of sub-projects open simultaneously in their IDE, each with its own build target and dependencies.&lt;/p&gt;
&lt;p&gt;In comparison, JavaScript projects tend to be a mess because of the lack of an idiomatic way to split code across packages. Tools like &lt;a href=&#34;https://github.com/lerna/lerna&#34;&gt;lerna&lt;/a&gt; help you create a proper JavaScript monorepo and rationalize the development of a complex project. However these tools pack a lot of features which take some time to properly master. The added complexity may result in misunderstanding and in the end the time gained by deploying the tool may be lost in obscure debugging sessions. Additionally, TypeScript is a different beast and requires more work to integrate properly.&lt;/p&gt;
&lt;p&gt;In this tutorial, you will learn the basic principles behind a multi-package TypeScript project so you can apply them in your own work.&lt;/p&gt;
&lt;p&gt;I created a minimalist project skeleton so you can follow along this tutorial. You can download it &lt;a href=&#34;https://github.com/hmil/ts-seed-project/archive/part1.zip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;The-setup&#34;&gt;&lt;a href=&#34;#The-setup&#34; class=&#34;headerlink&#34; title=&#34;The setup&#34;&gt;&lt;/a&gt;The setup&lt;/h2&gt;&lt;p&gt;Download and unpack the &lt;a href=&#34;https://github.com/hmil/ts-seed-project/archive/part1.zip&#34;&gt;tutorial files&lt;/a&gt; into your workspace. You should end up with a project containing a &lt;code&gt;packages&lt;/code&gt; sub-folder with three packages inside.&lt;br&gt;Each package is an independent unit of code, with its own build target and test suite:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;tstuto-server&lt;/code&gt; package contains the NodeJS server files&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;tstuto-web-client&lt;/code&gt; package contains the web application which talks to the server&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;tstuto-api&lt;/code&gt; package contains shared definitions which the client and server will use to communicate in a type-safe way.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you may have guessed, our example application consists of a simple web server and a web application which talk over HTTP.&lt;/p&gt;
&lt;p&gt;Go ahead and open the top-level folder in your favorite TypeScript IDE (it should be &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VSCode&lt;/a&gt;, if it’s not, then go ahead and download it now, I’ll wait…).&lt;/p&gt;
&lt;p&gt;First, you’ll want to check that everything works as intended. Navigate to &lt;code&gt;packages/tstuto-web-client&lt;/code&gt; and run:&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm install&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;npm run build&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Then &lt;strong&gt;repeat this step for the &lt;code&gt;tstuto-server&lt;/code&gt; package&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;When you are done, you should have successfully built the demo application. Navigate to the &lt;code&gt;tstuto-server&lt;/code&gt; package and run &lt;code&gt;npm start&lt;/code&gt; to launch the server. Then, point your web browser at &lt;code&gt;http://localhost:3000&lt;/code&gt;. You should see an ugly web page with a button.&lt;/p&gt;
&lt;h2 id=&#34;Using-a-shared-package&#34;&gt;&lt;a href=&#34;#Using-a-shared-package&#34; class=&#34;headerlink&#34; title=&#34;Using a shared package&#34;&gt;&lt;/a&gt;Using a shared package&lt;/h2&gt;&lt;p&gt;Take a look at the files &lt;code&gt;packages/tstuto-server/src/controllers/MoodController.ts&lt;/code&gt;, and &lt;code&gt;packages/tstuto-web-client/src/main-client.ts&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The client uses the &lt;a href=&#34;https://github.com/axios/axios&#34;&gt;axios&lt;/a&gt; library to fetch a mood from the server over HTTP. If you are a type safety freak, something should tickle your senses here: the communication is not safe. Indeed, look at the type returned by the &lt;code&gt;axios&lt;/code&gt; call in &lt;code&gt;main-client.ts&lt;/code&gt;: you’ll find that it is of the &lt;code&gt;any&lt;/code&gt; type. You can use this object however you want and the TypeScript compiler will never complain, even though your code might crash at run-time!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/ts-structure-tuto/untyped-response.gif&#34; alt=&#34;An untyped response lets you type anything and provides no intellisense&#34;&gt;&lt;/p&gt;
&lt;p&gt;Enter the &lt;code&gt;tstuto-api&lt;/code&gt; package. Take a look at &lt;code&gt;packages/tstuto-api/src/index.ts&lt;/code&gt;, we define a type and two factory functions there. &lt;strong&gt;Compile them&lt;/strong&gt; by navigating to &lt;code&gt;packages/tstuto-api&lt;/code&gt; and running &lt;code&gt;npm install &amp;amp;&amp;amp; npm run build&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, going back to &lt;code&gt;MoodController.ts&lt;/code&gt;, &lt;strong&gt;replace the function by the following&lt;/strong&gt;, which uses the factory methods instead of the inline object definitions:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; happyMood, sadMood &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;../../../tstuto-api/src/index&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; express &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;express&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; HAPPY_THRESHOLD = &lt;span class=&#34;number&#34;&gt;0.3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MoodController&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;_req: express.Request, res: express.Response&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; indicator = &lt;span class=&#34;built_in&#34;&gt;Math&lt;/span&gt;.random();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (indicator &amp;gt; HAPPY_THRESHOLD) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        res.json(happyMood(indicator));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        res.json(sadMood(indicator));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;In &lt;code&gt;main-client.ts&lt;/code&gt;, use the interface to type the object returned by axios:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; IMoodAPIResponse &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;../../tstuto-api/src/index&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* ... */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// line 23:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; mood = &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; axios.get&amp;lt;IMoodAPIResponse&amp;gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;/api/mood&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;That is way better, our API is now type-safe. The TypeScript compiler catches typos, and we have proper auto-completion and code refactoring!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/ts-structure-tuto/typed-response.gif&#34; alt=&#34;A typed response provides completion and catches typos&#34;&gt;&lt;/p&gt;
&lt;p&gt;However, written as is, our import statement actually instructs the TypeScript compiler to compile the target module along with ours. This has multiple nasty side effects and defeats the point of having separate modules altogether.&lt;/p&gt;
&lt;p&gt;It would be much cleaner if we could just write:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; IMoodAPIResponse &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;tstuto-api&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We will see how we can achieve this in the next section.&lt;/p&gt;
&lt;h2 id=&#34;Proper-code-sharing&#34;&gt;&lt;a href=&#34;#Proper-code-sharing&#34; class=&#34;headerlink&#34; title=&#34;Proper code sharing&#34;&gt;&lt;/a&gt;Proper code sharing&lt;/h2&gt;&lt;p&gt;So far, we’ve split our code into three modules and used import statements to borrow code from one module into another. However, we would like to isolate the modules further and import the built artifact rather than importing the raw source code. This means that we want the TypeScript compiler to use the type definitions emitted during compilation and we want node (or webpack for the client) to import the generated JavaScript file rather than the source TypeScript. This helps us avoid bugs spreading across modules and prevents careless developers from producing spaghetti code (to some extent…). It will also &lt;strong&gt;speed up your builds&lt;/strong&gt; because &lt;code&gt;tsc&lt;/code&gt; won’t have to compile the same source files over and over.&lt;/p&gt;
&lt;p&gt;Go ahead and replace the two imports looking like &lt;code&gt;import xxx from &amp;#39;../../api/src/index&amp;#39;&lt;/code&gt; in &lt;code&gt;main-client.ts&lt;/code&gt; and &lt;code&gt;MoodController.ts&lt;/code&gt; with just &lt;code&gt;import xxx from &amp;#39;api&amp;#39;&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// main-client.ts:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; IMoodAPIResponse &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;tstuto-api&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// MoodController.ts:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; happyMood, sadMood &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;tstuto-api&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Don’t worry about the compiler error. All we need to do to make it disappear is instruct the TypeScript compiler to look for our custom packages in the &lt;code&gt;packages&lt;/code&gt; folder. Fortunately, there is an option called &lt;code&gt;baseUrl&lt;/code&gt; which allows us to do just that.&lt;/p&gt;
&lt;p&gt;Edit &lt;code&gt;tsconfig.json&lt;/code&gt; at the root of the project and uncomment the line &lt;code&gt;&amp;quot;baseUrl&amp;quot;: &amp;quot;packages&amp;quot;&lt;/code&gt;. This way the TypeScript compiler also looks at the &lt;code&gt;packages&lt;/code&gt; directory to resolve package names. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note 1: Your packages may conflict with packages installed in &lt;code&gt;node_modules&lt;/code&gt;; this is why we prefixed all our packages with &lt;code&gt;tstuto-&lt;/code&gt;: to make sure that we don’t accidentally shadow an actual npm package. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Note 2: You may need to reload your editor after you changed &lt;code&gt;tsconfig.json&lt;/code&gt;. In VSCode, open the command palette (CTRL+SHIFT+P) and chose “reload window”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is one more thing we need to do in order for this to work. TypeScript will not recognize your custom module unless you specified the &lt;code&gt;type&lt;/code&gt; property in its &lt;code&gt;package.json&lt;/code&gt;. Open &lt;code&gt;packages/tstuto-api/package.json&lt;/code&gt;. You will see a line with the text “TODO”. Replace it with the following:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;types&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;dist/index.d.ts&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;You want to make extra sure that you got this setting right&lt;/strong&gt;. If there is an error here, nobody will let you know, your imports might resolve to &lt;code&gt;any&lt;/code&gt; and you won’t notice your mistake until it’s too late. &lt;strong&gt;The &lt;code&gt;types&lt;/code&gt; property in package.json must point to the type definition of your entry point!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now if you go back to &lt;code&gt;packages/tstuto-server&lt;/code&gt; and run &lt;code&gt;npm run build&lt;/code&gt;, you should get a successful build. However, if you try to start the server with &lt;code&gt;npm run start&lt;/code&gt;, it will fail. Why? Although the TS compiler has figured out your project structure, Node.js is still oblivious to it: it doesn’t know where to find your custom modules at run time!&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ npm start&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;gt; tstuto-server@0.0.0 start /workspace/ts-project-seed/packages/tstuto-server&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;gt; node bin/server.js&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;module.js:540&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    throw err;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ^&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Error: Cannot find module &lt;span class=&#34;string&#34;&gt;&amp;#x27;tstuto-api&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    at Function.Module._resolveFilename (module.js:538:15)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    at Function.Module._load (module.js:468:25)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    at Module.require (module.js:587:17)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    at require (internal/module.js:11:18)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    at Object.&amp;lt;anonymous&amp;gt; (/workspace/ts-project-seed/packages/tstuto-server/dist/src/controllers/MoodController.js:3:20)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    at Module._compile (module.js:643:30)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    at Object.Module._extensions..js (module.js:654:10)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    at Module.load (module.js:556:32)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    at tryModuleLoad (module.js:499:12)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    at Function.Module._load (module.js:491:3)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The next trick we will use is called &lt;code&gt;NODE_PATH&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NODE_PATH&lt;/code&gt; is an environment variable node uses for pretty much the same purpose TypeScript uses “baseUrl”: it looks for additional &lt;code&gt;node_modules&lt;/code&gt; inside the directory specified by &lt;code&gt;NODE_PATH&lt;/code&gt;. The problem is that hacks based on environment variables tend to work poorly cross-platform. That’s why we will use &lt;code&gt;cross-env&lt;/code&gt;, a nifty node module that lets you define environment variables in a portable way.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;packages/tstuto-server/package.json&lt;/code&gt;, replace the line &lt;code&gt;&amp;quot;start&amp;quot;: &amp;quot;node bin/server.js&amp;quot;,&lt;/code&gt; with &lt;code&gt;&amp;quot;start&amp;quot;: &amp;quot;cross-env NODE_PATH=.. node bin/server.js&amp;quot;,&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, when you run &lt;code&gt;npm start&lt;/code&gt;, node will also look at the parent directory when resolving modules. This is how it will know that &lt;code&gt;tstuto-api&lt;/code&gt; refers to your custom module in &lt;code&gt;packages/tstuto-api&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Your application should now work properly!&lt;/p&gt;
&lt;h1 id=&#34;Next-steps&#34;&gt;&lt;a href=&#34;#Next-steps&#34; class=&#34;headerlink&#34; title=&#34;Next steps&#34;&gt;&lt;/a&gt;Next steps&lt;/h1&gt;&lt;p&gt;You have learned the fundamental tricks which will allow you to structure a multi-package typescript project. There are things left to fix though.  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It is tedious to go into each sub-project and manually run &lt;code&gt;npm run build&lt;/code&gt; each time we change something. In addition, if we add more modules, manually tracking dependencies can quickly become a nightmare. That’s why we need a &lt;strong&gt;build and dependency tracking system&lt;/strong&gt; to handle all of that for us.&lt;/li&gt;
&lt;li&gt;We would like to &lt;strong&gt;export our project&lt;/strong&gt;, either to be distributed as an npm module or to be deployed somewhere. We can not ship our packages as separate npm packages just like that because they now depend on the directory structure of the repository.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;See you in the &lt;a href=&#34;/2018/05/TypeScript-project-structure2/&#34;&gt;next part of this tutorial&lt;/a&gt;, where we discuss those issues.&lt;/strong&gt; &lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;Appendix-How-did-you-serve-the-client-files-again&#34;&gt;&lt;a href=&#34;#Appendix-How-did-you-serve-the-client-files-again&#34; class=&#34;headerlink&#34; title=&#34;Appendix: How did you serve the client files again?&#34;&gt;&lt;/a&gt;Appendix: How did you serve the client files again?&lt;/h1&gt;&lt;p&gt;You may have noticed that our server also takes care to serve the client (as static files). While there are scenarios where you will want to ship the client separately, serving it from the API server is quite handy for development and suits a broad range of practical use-cases.&lt;/p&gt;
&lt;p&gt;The trick fits into these three lines of code:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Bind static content to server&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; pathToWebUI = path.dirname(&lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;.resolve(&lt;span class=&#34;string&#34;&gt;&amp;#x27;../../../tstuto-web-client&amp;#x27;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; staticDirToServer = path.join(pathToWebUI, &lt;span class=&#34;string&#34;&gt;&amp;#x27;public&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;server.use(express.static(staticDirToServer));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We get the absolute path to the &lt;code&gt;tstuto-web-client&lt;/code&gt; module and concatenate the &lt;code&gt;public&lt;/code&gt; directory to it; we then instruct express to serve this folder as static content. Doing it this way allows us to keep the server and client completely separated and avoid any copy which would make our build system much more complex.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You should use the module name &lt;code&gt;&amp;#39;tstuto-web-client&amp;#39;&lt;/code&gt; instead of the relative path &lt;code&gt;&amp;#39;../../../tstuto-web-client&amp;#39;&lt;/code&gt; now that you have learned the NODE_PATH trick.&lt;/strong&gt; The reason the tutorial files ship with the relative path is to make it work as-is (even if you don’t set NODE_PATH), but this will break when you’ll try to deploy the app in the next part.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;Thanks &lt;a href=&#34;https://lbarman.ch/&#34;&gt;Ludovic&lt;/a&gt; for proofreading this tutorial.&lt;/em&gt;&lt;/p&gt;
</description>
        </item>
        <item>
            <guid isPermalink="true">https://code.hmil.fr/2017/08/archive/deal-with-nullables-like-theyre-not-even-here-good-coding-practices-in-typescript/</guid>
            <title>Deal with nullables like they&#39;re not even here - Good coding practices in TypeScript.</title>
            <link>https://code.hmil.fr/2017/08/archive/deal-with-nullables-like-theyre-not-even-here-good-coding-practices-in-typescript/</link>
            <category>TypeScript</category>
            <pubDate>Tue, 01 Aug 2017 15:05:10 +0200</pubDate>
            <description>&lt;p&gt;Today we will take a look at a couple ways to improve your TypeScript code. By applying those techniques we will get code that is more readable, contains less bugs and is objectively higher-level without any downside. How cool is that ?&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;An-example-to-get-started&#34;&gt;&lt;a href=&#34;#An-example-to-get-started&#34; class=&#34;headerlink&#34; title=&#34;An example to get started&#34;&gt;&lt;/a&gt;An example to get started&lt;/h2&gt;&lt;p&gt;I like to use examples to illustrate what I’m talking about, so let’s start with the following code:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;User&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;title&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; name: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/** A user may want to fetch her introduction sentence from an async source so&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;      * we use a callback to handle the asynchronous execution flow.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;      */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; introduce(cb: &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;msg: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        setImmediate(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cb(&lt;span class=&#34;string&#34;&gt;`Hello, my name is &lt;span class=&#34;subst&#34;&gt;$&amp;#123;&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.name&amp;#125;&lt;/span&gt;`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;App&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    user?: User;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; login(user: User): &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.user = user;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; renameUser(newName: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.user.name = newName;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; introduceUser(cb: &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;err: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; | &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;, msg?: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.user.introduce(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;msg&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cb(&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;, msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; app = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; App();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;app.introduceUser(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;err, res&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (err) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.error(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(res);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;app.login(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; User(&lt;span class=&#34;string&#34;&gt;&amp;#x27;John&amp;#x27;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;app.introduceUser(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;err, res&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (err) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.error(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(res);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This useless piece of code simply illustrates the case where we have a class (Here &lt;strong&gt;App&lt;/strong&gt; containing a member which may be null (&lt;strong&gt;user&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;I already hear functional programming geeks yelling at me, arguing that mutable values are bad and nullable ones are even worse.&lt;br&gt;The thing is, in practice there will always be a piece of stateful code with a nullable in there, and although you can avoid it with FP trickery, I want to show you that we can achieve the same amount of protection without sacrificing the ease and comfort we get out of nullables.&lt;/p&gt;
&lt;p&gt;OK, let’s get back to business, the above piece of code is bad for an obvious reason. Since &lt;strong&gt;user&lt;/strong&gt; may be undefined, calling introduceUser may result in an error.&lt;/p&gt;
&lt;h2 id=&#34;strictNullChecks&#34;&gt;&lt;a href=&#34;#strictNullChecks&#34; class=&#34;headerlink&#34; title=&#34;strictNullChecks&#34;&gt;&lt;/a&gt;strictNullChecks&lt;/h2&gt;&lt;p&gt;The first step is to turn on the strictNullChecks &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/compiler-options.html&#34;&gt;compiler option&lt;/a&gt; in the project’s tsconfig.json.&lt;br&gt;What this flag does is that it considers the &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; types as completely independent types and thus prevents accidental casting and/or calling methods on variables with those types.&lt;br&gt;It makes sense that this flag is off by default because TypeScript needs to be as close to JavaScript as possible to ease the learning curve. However, using TypeScript in production without –strictNullChecks is insane. Anytime a nullable value is used without any check &lt;strong&gt;is an error&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now, with the –strictNullChecks flag enabled, our code above won’t compile anymore, so we know we need to handle the case where user is null. The obvious way to do it is to add simple null checks.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;App&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; renameUser(newName: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.user == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Error&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;No user is logged in!&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.user.name = newName;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; introduceUser(cb: &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;err: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; | &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;, msg?: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.user == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; cb(&lt;span class=&#34;string&#34;&gt;&amp;#x27;No user is logged in!&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.user.introduce(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;msg&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cb(&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;, msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Note that since the method introduceUser is using a nodeJS-style asynchronous control flow, we need to call the callback with the error as the first parameter.&lt;/p&gt;
&lt;p&gt;The TypeScript compiler analyses the control flow and sees that, because of the newly added null check, the references to the user member are safe.&lt;/p&gt;
&lt;p&gt;This works in practice but has two downsides:&lt;br&gt;1. As your class grows, the number of null checks grows linearly. Each additional branch makes each method more &lt;a href=&#34;https://en.wikipedia.org/wiki/Cyclomatic_complexity&#34;&gt;complex&lt;/a&gt; and less readable.&lt;br&gt;2. We need to duplicate the error message which goes against the DRY principle. (even if we factor out the string itself, the string identifier will have to be duplicated anyway.)&lt;/p&gt;
&lt;h2 id=&#34;Using-getters&#34;&gt;&lt;a href=&#34;#Using-getters&#34; class=&#34;headerlink&#34; title=&#34;Using getters&#34;&gt;&lt;/a&gt;Using getters&lt;/h2&gt;&lt;p&gt;Who said getters were only good for public interfaces? In this scenario we can actually use a getter to reduce the number of branches in our class and make the code more readable.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;App&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; getUser(): User &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.user) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Error&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;No user is logged in!&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.user;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; renameUser(newName: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.getUser().name = newName;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; introduceUser(cb: &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;err: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; | &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;, msg?: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.getUser().introduce(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;msg&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cb(&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;, msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The getter allows us to factor-out the null-check and our public methods are readable again. If calling getUser() each time looks bad to your taste and you target ES5 or higher, you can actually rewrite the App class using an &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get&#34;&gt;ES5 getter&lt;/a&gt; like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;App&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    _user?: User;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; login(user: User): &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;._user = user;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;user&lt;/span&gt;(): &lt;span class=&#34;title&#34;&gt;User&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;._user) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Error&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;No user is logged in!&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;._user;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; renameUser(newName: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.user.name = newName;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; introduceUser(cb: &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;err: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; | &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;, msg?: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.user.introduce(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;msg&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cb(&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;, msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The most attentive reader might notice that we are back to square one: If the API consumer calls app.renameUser() or app.introduceUser() before logging in, they will get an exception! Even worse, our asynchronous control flow is broken because the callback will never be invoked with an error.&lt;/p&gt;
&lt;p&gt;We’ll talk about the asynchronous case in a minute, but first I need to mention one huge advantage this solution has over the initial version: The “unhappy” path is managed.&lt;/p&gt;
&lt;p&gt;Before, we relied on the JS engine to crash when the user variable was undefined. The API consumer would get something like “undefined has no member ‘name’”. Any JS dev knows how annoying it is to dig through dozens of stack trace frames to find out what was undefined and why. This kind of error is a legit software bug.&lt;br&gt;On the other hand, what we got now is an error that we are aware of. We know it may happen, we know why and we know what to do if it does happen. We can even show the error to the end user in the UI because “You are not authenticated” sounds better to end users than “Undefined is not a function”!!!&lt;/p&gt;
&lt;p&gt;This is the reason why –strictNullChecks is so important, it helps you, the programmer, avoid bugs. Your users might still get an error but you expect it and you can document it.&lt;/p&gt;
&lt;h2 id=&#34;Making-it-airtight&#34;&gt;&lt;a href=&#34;#Making-it-airtight&#34; class=&#34;headerlink&#34; title=&#34;Making it airtight&#34;&gt;&lt;/a&gt;Making it airtight&lt;/h2&gt;&lt;p&gt;There is one last issue with the current solution: the asynchronous workflow. Indeed, while languages like Java have compile-time checks to prevent you from throwing exceptions where you shouldn’t, TypeScript doesn’t, and even if it did, you could still easily make a mess of your interface declarations.&lt;br&gt;TypeScript can only protect unchecked access to nullables in a synchronous workflow and that is why we have no other solution but to throw an Error in our getter.&lt;br&gt;By now you should know that whenever you have a problem with your asynchronous workflow, it’s because you are not using enough promises. Let’s see what promises can do for us in this case.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;App&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; renameUser(newName: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.user.name = newName;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; introduceUser(): &lt;span class=&#34;built_in&#34;&gt;Promise&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Promise&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;resolve&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.user.introduce(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;s&lt;/span&gt;) =&amp;gt;&lt;/span&gt; resolve(s));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; app = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; App();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;app.introduceUser().then(&lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log, &lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.error);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;app.login(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; User(&lt;span class=&#34;string&#34;&gt;&amp;#x27;John&amp;#x27;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;app.introduceUser().then(&lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log, &lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.error);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;note: The promise API is &lt;a href=&#34;https://caniuse.com/#search=promises&#34;&gt;available&lt;/a&gt; in node and all major browsers, except IE&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When you wrap code in a promise like so, any exception emitted within the execution context of the promise is caught and used to reject the promise itself. Therefore, you get a consistent error handling mechanism where no exception may leak out.&lt;/p&gt;
&lt;p&gt;We now have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;synchronous methods that return the result or throw an exception&lt;/li&gt;
&lt;li&gt;asynchronous methods that fullfill a promise or reject it with an error&lt;/li&gt;
&lt;li&gt;Readable code and managed errors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As advertised in the introduction, we made our code better with no downside at all!&lt;/p&gt;
&lt;h2 id=&#34;TL-DR-To-remember&#34;&gt;&lt;a href=&#34;#TL-DR-To-remember&#34; class=&#34;headerlink&#34; title=&#34;TL;DR / To remember&#34;&gt;&lt;/a&gt;TL;DR / To remember&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;  Always use the –strictNullChecks compiler option&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dont be ashamed of nullable values, but if you do need one:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;  Always access a nullable through a getter, even within the private context of a class&lt;/li&gt;
&lt;li&gt;  Find the high level meaning of such a null value and throw a user-friendly error in the getter&lt;/li&gt;
&lt;li&gt;  Wrap all async code in a promise and always write promise-based async APIs (no more node-style callbacks)&lt;br&gt;Check-out the &lt;a href=&#34;https://gist.github.com/hmil/d4034d013dacb198992567cbe31150c5&#34;&gt;gist&lt;/a&gt; of this guide if you prefer reading code.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
            <guid isPermalink="true">https://code.hmil.fr/2016/10/archive/you-should-worry-about-vary/</guid>
            <title>You should worry about Vary</title>
            <link>https://code.hmil.fr/2016/10/archive/you-should-worry-about-vary/</link>
            <pubDate>Sun, 16 Oct 2016 03:49:15 +0200</pubDate>
            <description>&lt;p&gt;We’ve all heard of XSS, SQLi and CSRF. And although they keep occurring all the time, any decent web framework nowadays has some mechanisms to avoid those. Now did you know CSRF had a little sister? It is so poorly known that it seems like it doesn’t even have its own name! Before explaining how it works, let’s see what it can do.&lt;/p&gt;
&lt;h1 id=&#34;Some-background&#34;&gt;&lt;a href=&#34;#Some-background&#34; class=&#34;headerlink&#34; title=&#34;Some background&#34;&gt;&lt;/a&gt;Some background&lt;/h1&gt;&lt;p&gt;Meet Bob, a web dev who is in charge of writing a public facing API. Bob sets the Access-Control-Allow-Origin header to allow all origin domains. Indeed, Bob wants any website to be able to talk to his API. Now, being a thoughtful developer, Bob knows about &lt;a href=&#34;https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CSRF&lt;/a&gt; and he builds an authentication mechanism that delivers access tokens. Without a proper access token, his API won’t talk!&lt;/p&gt;
&lt;p&gt;Still following? Good, now you may be wondering what this API does. In fact this API allows different services to store and share credentials in the cloud. The way a service gets the credentials is by issuing a request like this one:&lt;br&gt;&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;GET /vault/&amp;#123;account&amp;#125;/&amp;#123;service&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Bob heard one day that Auth basic is unbreakable, therefore he is using this method to pass the API key and username.&lt;br&gt;But the backend is doing some crypto stuff and hence requesting the credentials is an expensive operation. Bob adds some Cache-Control information to tell the browser to cache the response for a little bit. This way Bob reduces the load on his server and improves the speed of apps consuming his API.&lt;br&gt;If the credentials check out, the API returns something like this:&lt;br&gt;&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;200 OK&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Access-Control-Allow-Origin: *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Access-Control-Allow-Headers: Authorization&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Cache-Control: no-transform, max-age=600&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Content-Length: 42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Content-Type: application/json&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&amp;quot;username&amp;quot;:&amp;quot;Alice&amp;quot;,&amp;quot;password&amp;quot;:&amp;quot;I4mab055&amp;quot;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Everything works fine until one day, a client complains that her credentials got stolen…&lt;br&gt;Damn it Bob, again?!&lt;/p&gt;
&lt;h1 id=&#34;You-just-got-hit&#34;&gt;&lt;a href=&#34;#You-just-got-hit&#34; class=&#34;headerlink&#34; title=&#34;You just got hit&#34;&gt;&lt;/a&gt;You just got hit&lt;/h1&gt;&lt;p&gt;Bob can check his server log for a while, he will never find anything. The attacker left no evidence behind because he &lt;strong&gt;never even had to talk to Bob’s API&lt;/strong&gt;; Everything happened locally, in Alice’s browser. Alice received this stupid email a few days ago and couldn’t resist opening a link to a picture of a &lt;a href=&#34;https://i.reddituploads.com/3a16089469a04fe2bec7c3666b3bf169?fit=max&amp;amp;h=1536&amp;amp;w=1536&amp;amp;s=6160f4d2e6b39bb1c1684416878ec2dc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cat wearing a ninja-turtle mask&lt;/a&gt;.&lt;br&gt;While she was watching this picture, a piece of javascript issued an HTTP request in the background to Bob’s API and stole her credentials. But how did the malicious website get an API token in the first place you’ll ask? Well it didn’t. Because it never had to. &lt;strong&gt;A simple request without the Authorization header was enough to get the information.&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;Introducing-Vary&#34;&gt;&lt;a href=&#34;#Introducing-Vary&#34; class=&#34;headerlink&#34; title=&#34;Introducing: Vary&#34;&gt;&lt;/a&gt;Introducing: Vary&lt;/h1&gt;&lt;p&gt;So there’s this thing in the HTTP spec that you may or may not have heard about. It’s called the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Vary&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vary&lt;/a&gt; header. What it does is inform any cache about which request headers can cause the response to change. &lt;strong&gt;If the Vary header is omitted, then caches will disregard the request headers when deciding whether to serve the response from cache.&lt;/strong&gt; In other words, no matter which headers were sent by the client the first time, the response will be cached and served back to every subsequent request until the response expires, regardless of the next request’s headers. Remember how Bob made the response cacheable for 10 minutes? This means that the attack is successful if it happens within 10 minutes of the original request.&lt;/p&gt;
&lt;p&gt;To prevent this issue, the API should send the &lt;em&gt;Vary&lt;/em&gt; header in its responses to inform caches that the response will be different for different values of the &lt;em&gt;Authorization&lt;/em&gt; header. In our example we get:&lt;br&gt;&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;200 OK&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Access-Control-Allow-Origin: *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Access-Control-Allow-Headers: Authorization&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Cache-Control: no-transform, max-age=600&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Content-Length: 42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Content-Type: application/json&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;**Vary: Authorization**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&amp;quot;username&amp;quot;:&amp;quot;Alice&amp;quot;,&amp;quot;password&amp;quot;:&amp;quot;I4mab055&amp;quot;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;Going-beyond&#34;&gt;&lt;a href=&#34;#Going-beyond&#34; class=&#34;headerlink&#34; title=&#34;Going beyond&#34;&gt;&lt;/a&gt;Going beyond&lt;/h1&gt;&lt;p&gt;So stealing information is fun but let’s see if we can use this flaw to do something better. Imagine a web page that allows a user to set a message of the day, stores it in the cookies and displays it whenever the user visits the page for the rest of the day. The page is cached and can be fetched cross-domain just like in the previous example and it doesn’t have &lt;em&gt;Vary: Cookie&lt;/em&gt;. If a user visits my website, I could issue a request to the greetings page with a custom Cookie. If I manage to perform this request when the page is not in cache yet, then the browser will fetch the page with my custom cookie and store it. Yes, we just found ourselves a cache-poisoning vulnerability. Now guess what happens next if this page allows the greeting message to contain javascript?&lt;/p&gt;
&lt;p&gt;Depending on the cache headers, it may even be possible that the response gets cached on a server sitting between the victim and the origin. In this situation the attacker can read the victim’s data without even running code in her browser! All that is required is a hit on the cache server.&lt;/p&gt;
&lt;h1 id=&#34;Wrapping-up&#34;&gt;&lt;a href=&#34;#Wrapping-up&#34; class=&#34;headerlink&#34; title=&#34;Wrapping up&#34;&gt;&lt;/a&gt;Wrapping up&lt;/h1&gt;&lt;p&gt;I wish this article will at least allow a few people to get awareness about the dangers associated with Cache-Control and the Vary header. This vulnerability is similar to CSRF in that it allows cross domain requests to do some damage. It is harder to exploit and does not allow to reach the server. This however makes it impossible to detect attacks while still allowing some information leakage and defacing. In the case of cache poisoning, it opens up the attacks surface to find other vulnerabilities such as XSS or even SQL injections.&lt;/p&gt;
&lt;p&gt;The fact that this vulnerability lies in the shadow of the big names like XSS makes it more likely to be looked over. In fact it &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-1418&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;has occurred before&lt;/a&gt; and I bet there are exploitable scenarios in the wild like those discussed above. So be careful next time you build an API and take some time to review your response headers. It can sometimes be trickier than you’d think figuring out which headers make the response change!&lt;/p&gt;
&lt;p&gt;You may want to try out &lt;a href=&#34;https://github.com/hmil/invariable-leak&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this quick and dirty proof of concept&lt;/a&gt; to see this flaw in action.&lt;/p&gt;
</description>
        </item>
        <item>
            <guid isPermalink="true">https://code.hmil.fr/2015/11/archive/githubs-merge-pull-request-is-wrong/</guid>
            <title>GitHub&#39;s &#34;merge pull request&#34; is wrong</title>
            <link>https://code.hmil.fr/2015/11/archive/githubs-merge-pull-request-is-wrong/</link>
            <category>git</category>
            <category>github</category>
            <pubDate>Sat, 21 Nov 2015 14:49:06 +0100</pubDate>
            <description>&lt;p&gt;This is the story of Bob. Bob is working on some cool project on github. He’s written tests and runs them continuously on &lt;a href=&#34;https://travis-ci.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;travis&lt;/a&gt;. Bob asks his contributors to write tests for new features they introduce. Using GitHub’s pull requests, he can make sure no bugs are introduced by looking for the green tick next to the commit number. If you look at the commit tree in Bob’s repository, you’ll probably find something like &lt;a href=&#34;http://nvie.com/posts/a-successful-git-branching-model/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Bob states in his contribution guide that people can fork &lt;em&gt;master&lt;/em&gt; to work on new features. He guarantees that master’s tests always pass and therefore, individual contributors don’t need to worry that much about errors made by other developers.&lt;/p&gt;
&lt;p&gt;If you’re familiar with github then you are probably familiar with this workflow and you’ll think that it’s perfectly reasonable.&lt;/p&gt;
&lt;p&gt;But you’ll be wrong. Bob got overly enthusiastic about github’s UI and will soon discover that &lt;strong&gt;he’s been wrong all this time&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;A-catastrophic-scenario&#34;&gt;&lt;a href=&#34;#A-catastrophic-scenario&#34; class=&#34;headerlink&#34; title=&#34;A catastrophic scenario&#34;&gt;&lt;/a&gt;A catastrophic scenario&lt;/h2&gt;&lt;p&gt;Say two contributors, Alice and Charlie, are writing code for Bob’s project in their respective branches. In this project, we find the following code for operating Bob’s car:&lt;br&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;doSomething&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String action)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (action) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&#34;OPEN_DOOR&#34;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       open_door();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Now Alice thinks it would be better if Bob used an &lt;strong&gt;enum&lt;/strong&gt; instead of a string. She changes the function to the following and opens a pull request on Bob’s project.&lt;br&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;doSomething&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Action action)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (action) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; Action.OPEN_DOOR:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       open_door();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Bob opens his project page and sees a pull request. He thinks Alice’s modification makes sense and, since all tests passed, he clicks on &lt;em&gt;the green button&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;[caption id=”attachment_221” align=”alignnone” width=”776”]&lt;a href=&#34;/assets/archive/2015/11/button_of_doom.png&#34;&gt;&lt;img src=&#34;/assets/archive/2015/11/button_of_doom.png&#34; alt=&#34;The button of doom&#34;&gt;&lt;/a&gt; The button of doom[/caption]&lt;/p&gt;
&lt;p&gt;Meanwhile, Charlie thinks Bob will need to close his car’s door at some point. Charlie adds a new case to the switch:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;doSomething&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String action)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (action) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&#34;OPEN_DOOR&#34;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       open_door();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&#34;CLOSE_DOOR&#34;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       close_door();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The next day, Bob opens his project on GitHub and sees Charlie’s pull request. All tests passed, no merge conflict, that’s a clear &lt;acronym title=&#34;Looks Good To Me&#34;&gt;LGTM&lt;/acronym&gt; and Bob merges the code.&lt;/p&gt;
&lt;p&gt;A few days later, Bob receives complaints from multiple developers, they forked master and it doesn’t build!&lt;/p&gt;
&lt;h2 id=&#34;What-could-go-wrong&#34;&gt;&lt;a href=&#34;#What-could-go-wrong&#34; class=&#34;headerlink&#34; title=&#34;What could go wrong?&#34;&gt;&lt;/a&gt;What could go wrong?&lt;/h2&gt;&lt;p&gt;The problem lies in a common misunderstanding of the following assumptions. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Different PRs must be completely independent&lt;/li&gt;
&lt;li&gt;No merge conflicts &amp;ne; No conflicts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you accept one of these to be violated, then expect your main branch to fail tests!&lt;/p&gt;
&lt;p&gt;If we speak in terms of diff, then Alice’s diff is the following:&lt;br&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;doSomething&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String action)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+ &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;doSomething&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Action action)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (action) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-     &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&#34;OPEN_DOOR&#34;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+     &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; Action.OPEN_DOOR:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         open_door();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;While Bob’s diff looks like this:&lt;br&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+     &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&#34;CLOSE_DOOR&#34;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+        close_door();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Put together we get&lt;br&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;doSomething&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String action)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+ &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;doSomething&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Action action)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (action) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-     &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&#34;OPEN_DOOR&#34;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+     &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; Action.OPEN_DOOR:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         open_door();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+     &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&#34;CLOSE_DOOR&#34;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+        close_door();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This diff &lt;strong&gt;does not cause a merge conflict&lt;/strong&gt; but it is actually in conflict!&lt;/p&gt;
&lt;h2 id=&#34;–no-ff-and-the-button-of-doom&#34;&gt;&lt;a href=&#34;#–no-ff-and-the-button-of-doom&#34; class=&#34;headerlink&#34; title=&#34;–no-ff and the button of doom&#34;&gt;&lt;/a&gt;–no-ff and the button of doom&lt;/h2&gt;&lt;p&gt;The flaw resides in that big old “merge pull request” button. While the green checks above the button and its fat style make pressing it a rewarding thing, it hides the real danger behind it: a blind merge!&lt;/p&gt;
&lt;p&gt;The above example looks like this in terms of commit history:&lt;br&gt;&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       +-PR_Charlie-+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      /              \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     +--PR_Alice--+   \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    /              \   \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;---+----------------x---x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                       master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;All changes introduced by Alice and Charlie on their respective PRs have been tested, but the merge commits (marked ‘x’ above) were not! This is called a “non fast-forward” merge (–no-ff in git) and is basically like committing directly on master.&lt;/p&gt;
&lt;h2 id=&#34;The-right-way-to-do-it&#34;&gt;&lt;a href=&#34;#The-right-way-to-do-it&#34; class=&#34;headerlink&#34; title=&#34;The right way to do it&#34;&gt;&lt;/a&gt;The right way to do it&lt;/h2&gt;&lt;p&gt;Assuming you are like Bob and want your main branch to always pass tests, then here is the right way to do this: Merge master into the PR fisrt, and merge only when fast forward. It would look like that:&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Initial state: both PRs are unmerged:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        +-PR_Charlie-+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       /              &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      +--PR_Alice--+  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     /                 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ---+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  master&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;on master: git merge --ff-only PR_Alice&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      +-PR_Charlie-+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     /                              &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ---+--PR_Alice--+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               master&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;on PR_Charlie: git merge master&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                  merge branch master into PR_Charlie   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                     |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      +-PR_Charlie-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     /              /                  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ---+--PR_Alice----+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 master&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Then on master: git merge --ff-only PR_Charlie&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      +-PR_Charlie-+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     /              \                  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ---+--PR_Alice----+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                     |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The end result is exactly the same as before EXCEPT that master was merged into the PR first, and this (if properly pushed to github) allows the automated tools to test the last commit. This ensures that master builds because master will always be on a commit that has been tested before.&lt;/p&gt;
&lt;p&gt;Many beginner (and even advanced) programmers get fooled into thinking that merging a green pull request cannot harm. In an ideal world, clicking the green button would: merge master into the branch, wait for the tests to pass, and on success, fast-forward master to the merge commit. But unfortunately I don’t think this is coming anytime soon. In the meantime, think about it twice before you press the &lt;em&gt;button of doom&lt;/em&gt;. And when in doubt, run the merge sequence manually in the right order. This may save you a few hours of debugging.&lt;/p&gt;
</description>
        </item>
        <item>
            <guid isPermalink="true">https://code.hmil.fr/2015/02/00-hacking-funrun2-how-to-reverse-engineer-a-corona-app/</guid>
            <title>Hacking FunRun2 — how to reverse engineer a Corona app</title>
            <link>https://code.hmil.fr/2015/02/00-hacking-funrun2-how-to-reverse-engineer-a-corona-app/</link>
            <category>funrun</category>
            <category>funrun2</category>
            <category>hack</category>
            <category>reverse engineering</category>
            <category>android</category>
            <pubDate>Fri, 13 Feb 2015 17:27:12 +0100</pubDate>
            <description>&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; This article is a bit old and does not apply to recent versions of the corona sdk. It is put here &lt;strong&gt;for educational purpose&lt;/strong&gt;, showing how one may try to break into this kind of applications. &lt;strong&gt;It is not a magic formula for hacking all corona apps across all versions of the sdk.&lt;/strong&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;&lt;a href=&#34;/assets/archive/2015/02/2015-02-13-17-38-04.jpg&#34;&gt;&lt;img src=&#34;/assets/archive/2015/02/2015-02-13-17-38-04.jpg&#34; alt=&#34;funrun2 hack&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you haven’t played funrun yet, you probably will soon. Funrun2 is one of the best multiplayer mobile games out there. It’s one of these rare games where you can have all the fun from the very first game you play, but still stays enjoyable after month of playing it. It’s my favorite game on mobile and since I had some spare time, I decided to tear it open (yeah, that’s what I do to things I like). It was a bit harder than expected and involves some not so trivial hacking as well as a bit of luck. By the way, yes, all these buttons work.&lt;/p&gt;
&lt;h2 id=&#34;The-easy-part&#34;&gt;&lt;a href=&#34;#The-easy-part&#34; class=&#34;headerlink&#34; title=&#34;The easy part&#34;&gt;&lt;/a&gt;The easy part&lt;/h2&gt;&lt;p&gt;First I need to get my hands on the &lt;em&gt;.apk&lt;/em&gt; file. There’s plenty of tools out there to do that, some of them are even &lt;a href=&#34;https://github.com/Lekensteyn/apk-downloader&#34;&gt;open source&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;An apk file is an archive, just like a jar or a zip so I can unpack it with regular unzipping tools. This gives me access to a &lt;a href=&#34;http://en.wikipedia.org/wiki/Android_application_package&#34;&gt;well documented&lt;/a&gt; directory structure. The two things I want are the &lt;em&gt;classes.dex&lt;/em&gt; file, containing java bytecode, and the assets directory. Reversing the first one allows me to get access to java source code so it’s pretty obvious why I want to look at it.&lt;br&gt;To understand why the second one is interesting though, you must consider that this game was built with a cross platform framework, namely corona. These kind of framework generally allow you to code your app with some scripting language that gets executed on every platform the same way. Therefore, unless the script is cross compiled to native language (which nobody ever does), it must be stored somewhere. That’s when the assets folder comes to play. It contains only a few images and this &lt;em&gt;resource.car&lt;/em&gt; file which extension conveniently matches Corona &lt;em&gt;ARchive&lt;/em&gt;. How cool is that ?&lt;br&gt;I open the file in a text editor and mostly get binary-unreadable-shit but there’s also strings like “lua.whatever.that.is.lu”. There are the scripts.&lt;br&gt;&lt;em&gt;In case you don’t know: &lt;a href=&#34;http://www.lua.org/&#34;&gt;lua&lt;/a&gt; is one of the main scripting languages used in games with it’s open-source libraries and tools.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now I still haven’t figured out where the images and sounds are (the corona archive weights a mere 2MB so it doesn’t contain any asset), but this will come later.&lt;/p&gt;
&lt;h2 id=&#34;Things-getting-interesting&#34;&gt;&lt;a href=&#34;#Things-getting-interesting&#34; class=&#34;headerlink&#34; title=&#34;Things getting interesting&#34;&gt;&lt;/a&gt;Things getting interesting&lt;/h2&gt;&lt;p&gt;Trying to open the corona archive, I quickly realize it’s not a common archive format (even 7-zip can’t open it !). So there are two ways to go: finding the loading procedure in the java code or analyzing the file structure by hand. The first seems more reasonable.&lt;br&gt;But first, let’s decompile the dalvik bytecode into human readable java. These tools are helpful: &lt;a href=&#34;https://code.google.com/p/dex2jar/&#34;&gt;dex2jar&lt;/a&gt; to covert the &lt;em&gt;.dex&lt;/em&gt; to &lt;em&gt;.class&lt;/em&gt; (&lt;a href=&#34;http://en.wikipedia.org/wiki/Dalvik_%28software%29&#34;&gt;dalvik&lt;/a&gt; to &lt;a href=&#34;http://en.wikipedia.org/wiki/Java_virtual_machine&#34;&gt;jvm&lt;/a&gt;) and &lt;a href=&#34;http://jd.benow.ca/&#34;&gt;jd&lt;/a&gt; to go back to plain java source code.&lt;/p&gt;
&lt;p&gt;Now I have a load of java source code to look into, great! Let’s look for the string “resource.car”: no results. Looking manually, I quickly find corona’s source code in com/ansca/corona, that’s where the magic must happen. However, nothing is nearly dealing with a “resource” nor a “.car” file. I find however references to images. They were actually located on the device’s external storage (sdcard/Android/obb) in a &lt;em&gt;.obb&lt;/em&gt; file. This is something common on android devices (that I wasn’t aware of before doing this hack), my guess is that moving resources allows the apk to be lighter and makes the internal memory footprint smaller. A &lt;em&gt;.obb&lt;/em&gt; file is just a zip with a fancy extension. I can grab this file on a computer, edit the images/sounds/whatever and put it back in place. The game still runs with my custom images.&lt;/p&gt;
&lt;p&gt;[caption id=”attachment_177” align=”aligncenter” width=”700”]&lt;a href=&#34;/assets/archive/2015/02/2015-02-13-17-54-08.jpg&#34;&gt;&lt;img src=&#34;/assets/archive/2015/02/2015-02-13-17-54-08.jpg&#34; alt=&#34;funrun_image&#34;&gt;&lt;/a&gt; Besides adding childish drawings to the game, there’s not much that can be done this way.[/caption]&lt;/p&gt;
&lt;p&gt;I’m in a dead-end with the java code. Let’s give a shot at manually reversing the resource.car file:&lt;/p&gt;
&lt;p&gt;I open it with a hex editor and quickly realize the format used is trivial:&lt;/p&gt;
&lt;p&gt;First, a header &lt;del&gt;to rule them all&lt;/del&gt;, then comes an index made of each file name + position (address) of it’s contents in the archive, then comes the data block with each file contents.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[header] 16 bytes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[index]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [entry]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   [header] (4 bytes) 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   [block addr] (4 bytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   [nameS] (4 bytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   [name] (nameS+1 bytes) 0-terminated&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   [padding] (0s to complete 4x addr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[files]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [entry]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [header] (4 bytes) 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [??] (4 bytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [size] (4 bytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [file] (no 0 termination)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [padding] (to next 4x addr)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;The resource.car file format&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now I didn’t have to code a packer for this format myself because luckily, someone already did that. So I grabbed this &lt;em&gt;corona archive packer/unpacker&lt;/em&gt; which you won’t find a link to on my blog.&lt;/p&gt;
&lt;p&gt;It turns out the archive contains uncompressed precompiled lua scripts, using luadec and then luac again you can decompile and then recompile these scripts which is very convenient. These lua scripts define absolutely every aspect of the game. From where a button might be to how fast a player can move and what a specific powerup does.&lt;br&gt;Injecting our custom resource.car in the app is a big deal because I could modify anything in the game.&lt;/p&gt;
&lt;p&gt;First I try modifying something inside the precompiled lua scripts, such as a string since we can easily recognize them. If this works, I can later try to recompile one file from the (modified) source.&lt;br&gt;I repack the resource and put it back in the apk file, sign it with dex2jar (as explained &lt;a href=&#34;https://code.google.com/p/dex2jar/wiki/ModifyApkWithDexTool&#34;&gt;here&lt;/a&gt;) and install it on my device. I launch the game and, with no real surprise, it crashes.&lt;/p&gt;
&lt;p&gt;I figured there’s probably some kind of check performed against the archive to guarantee integrity. However, the loader is nowhere to be found in the java source. This battle is lost but not the war.&lt;/p&gt;
&lt;h2 id=&#34;Going-down&#34;&gt;&lt;a href=&#34;#Going-down&#34; class=&#34;headerlink&#34; title=&#34;Going down&#34;&gt;&lt;/a&gt;Going down&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;/assets/archive/2015/02/a88.jpg&#34;&gt;&lt;img src=&#34;/assets/archive/2015/02/a88.jpg&#34; alt=&#34;a88&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yeah, maybe Di Caprio is right, we need to go low-level and find this resource loading procedure.&lt;br&gt;Inside the .apk, there’s another directory called “lib”. It contains architecture-specific libraries. You’d usually build a native library either when you have no choice but use C (for instance, lua is written in C) or when you want higher-than-java performances (for a game framework, it makes sense).&lt;/p&gt;
&lt;p&gt;In this lib folder, there’s some lua libraries, but also random libs for sound, video, analytics and whatever. Most importantly I find here a lib called &lt;em&gt;libcorona.so&lt;/em&gt;. Let’s quickly open it with a text editor to search for the string “resource.car”, bingo!&lt;/p&gt;
&lt;p&gt;I’ll have to disassemble the lib in order to understand what’s happening in there. It turns out, there’s an amazing tool that does this and it’s called &lt;a href=&#34;https://www.hex-rays.com/products/ida&#34;&gt;IDA&lt;/a&gt;. It’s more than a cross-architecture disassembler, it does lot’s of stuff but for my purpose I’ll just use it as a disassembler. It handles libcorona very well and kindly gives us the assembly code.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;FYI: I picked the armeabi-v7a version so what follows would be different different with an apk targetting another platform&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I look again for the string “resource.car” and find it referenced at offset 0x1081D4.&lt;/p&gt;
&lt;p&gt;[caption id=”attachment_180” align=”aligncenter” width=”762”]&lt;a href=&#34;/assets/archive/2015/02/res_car.png&#34;&gt;&lt;img src=&#34;/assets/archive/2015/02/res_car.png&#34; alt=&#34;res_car&#34;&gt;&lt;/a&gt; The only piece of code referring to “resource.car”[/caption]&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;It took me a while to figure out how things worked, but at some point i had a theory:&lt;br&gt;From the occurence of “resource.car”, I clearly see two execution paths: one that leads to a portion of code referencing the string &lt;em&gt;“could not verify”&lt;/em&gt; and exiting, and one that leads to a subroutine that I deduced was meant to initialize the lua runtime or something like that. What stands between them is a fragile Branch No Equal (BNE) that we would like to turn into a rock solid Branch.&lt;/p&gt;
&lt;p&gt;[caption id=”attachment_181” align=”aligncenter” width=”761”]&lt;a href=&#34;/assets/archive/2015/02/jump_annot.png&#34;&gt;&lt;img src=&#34;/assets/archive/2015/02/jump_annot.png&#34; alt=&#34;jump_annot&#34;&gt;&lt;/a&gt; Take the yellow jump to get to the blue subroutine and avoid the nasty red branches[/caption]&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Looking at &lt;a href=&#34;http://bear.ces.cwru.edu/eecs_382/ARM7-TDMI-manual-pt2.pdf&#34;&gt;this document&lt;/a&gt; and some other branch instructions around in the code, I deduced that I needed to change byte x108247 from 1A to EA to turn my BNE into a B. Going back to my hex editor (I should really learn how to use IDA properly some day) I change the aforementioned value.&lt;/p&gt;
&lt;p&gt;[caption id=”attachment_182” align=”aligncenter” width=”715”]&lt;a href=&#34;/assets/archive/2015/02/patched.png&#34;&gt;&lt;img src=&#34;/assets/archive/2015/02/patched.png&#34; alt=&#34;patched&#34;&gt;&lt;/a&gt; It’s a branch![/caption]&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Now let’s pack our patched lib back into the apk, sign it, install it, run it… It runs! Let’s see if our custom value is used.&lt;/p&gt;
&lt;p&gt;[caption id=”attachment_185” align=”aligncenter” width=”700”]&lt;a href=&#34;/assets/archive/2015/02/modded.jpg&#34;&gt;&lt;img src=&#34;/assets/archive/2015/02/modded.jpg&#34; alt=&#34;modded&#34;&gt;&lt;/a&gt; First time ever a guessed binary patch works upon first try.[/caption]&lt;/p&gt;
&lt;p&gt;Let’s try the full pipeline: modify the lua source code, compile it, repack the .car and place it back in the .apk. It works provided we use the proper luac version (a quick search for the version string in liblua.so saves you the guessing). That’s it, the path is paved for hours of fun modding the game!&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;I had seen many game cheats and always wondered how they actually work, now I know at least for this one. To illustrate this article, I managed to strip all ads from the game, create a speed hack, fly mode, and unlimited powerups. Hacking the in-game money is harder because only the server issues coins, so even if you trick your phone into thinking you are rich, the server knows how much you really have.&lt;br&gt;I’d like to emphasis that I personally think buying or downloading a cheat for a game is lame and those who do that just deserve a trojan. However, hacking a game is really something fun that one should try. It requires patience, and a capability to keep a clear mind even after hours of work leading nowhere.&lt;/p&gt;
</description>
        </item>
        <item>
            <guid isPermalink="true">https://code.hmil.fr/2014/12/archive/sailsjs-tutorial-expenses-tracking-app-part-4/</guid>
            <title>SailsJS tutorial &amp;#124; expenses tracking app (Part 4/4)</title>
            <link>https://code.hmil.fr/2014/12/archive/sailsjs-tutorial-expenses-tracking-app-part-4/</link>
            <pubDate>Thu, 18 Dec 2014 17:22:14 +0100</pubDate>
            <description>&lt;p&gt;&lt;a href=&#34;http://blog.hmil.fr/2014/12/sailsjs-tutorial-expenses-tracking-app-part-3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;In the previous parts&lt;/a&gt;,&lt;br&gt;we’ve set up a sails application, added some styles and views and implemented a solid backend. It’s now time to finish this application. We will implement the front-end, adjust a few settings and give some tracks to continue the development.&lt;/p&gt;
&lt;h2 id=&#34;The-app-page&#34;&gt;&lt;a href=&#34;#The-app-page&#34; class=&#34;headerlink&#34; title=&#34;The app page&#34;&gt;&lt;/a&gt;The app page&lt;/h2&gt;&lt;p&gt;To render our app page, let’s open the MainController (in &lt;em&gt;api/controllers&lt;/em&gt;) and replace the contents of the app action with&lt;br&gt;&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;app: function (req, res) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  res.view();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;What this does is it renders the view &lt;em&gt;views/main/app.ejs&lt;/em&gt; because we are in the app action of the MainController. You should have already added this view in &lt;a href=&#34;http://blog.hmil.fr/2014/12/sailsjs-tutorial-expenses-tracking-app-part-2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;part 2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next we only want logged-in users to access our app so let’s add the following lines in &lt;em&gt;config/policies.js&lt;/em&gt;&lt;br&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MainController: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&#39;app&#39;&lt;/span&gt;: [&lt;span class=&#34;string&#34;&gt;&#39;passport&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;sessionAuth&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Also we want some more information about our users than we currently get, like their profile picture and full name. To do this, we’ll need to hack a bit into what sails-generate-auth generated us. Open &lt;em&gt;api/services/passport.js&lt;/em&gt;, line 82 there’s the code fetching user attributes&lt;/p&gt;
&lt;p&gt;&lt;pre lang=&#34;javascript&#34; line=&#34;82&#34;&gt;&lt;br&gt;  // If the profile object contains a list of emails, grab the first one and&lt;br&gt;  // add it to the user.&lt;br&gt;  if (profile.hasOwnProperty(‘emails’)) {&lt;br&gt;    user.email = profile.emails[0].value;&lt;br&gt;  }&lt;br&gt;  // If the profile object contains a username, add it to the user.&lt;br&gt;  if (profile.hasOwnProperty(‘username’)) {&lt;br&gt;    user.username = profile.username;&lt;br&gt;  }&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;  // If neither an email or a username was available in the profile, we don’t&lt;br&gt;  // have a way of identifying the user in the future. Throw an error and let&lt;br&gt;  // whoever’s next in the line take care of it.&lt;br&gt;  if (!user.username &amp;amp;&amp;amp; !user.email) {&lt;br&gt;    return next(new Error(‘Neither a username nor email was available’));&lt;br&gt;  }&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;**Remove all this** and insert this instead:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;pre lang=&amp;quot;javascript&amp;quot; line=&amp;quot;82&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if (!profile.hasOwnProperty(&amp;apos;id&amp;apos;) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      || !profile.hasOwnProperty(&amp;apos;displayName&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      || !profile.hasOwnProperty(&amp;apos;photos&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      || profile.photos.length == 0 ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sails.log.error(&amp;apos;not enough info&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    next(new Error(&amp;apos;Your login provider did not provide enough information.&amp;apos;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  user.username = profile.displayName;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  user.picture = profile.photos[0].value;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;Scripting&#34;&gt;&lt;a href=&#34;#Scripting&#34; class=&#34;headerlink&#34; title=&#34;Scripting&#34;&gt;&lt;/a&gt;Scripting&lt;/h2&gt;&lt;p&gt;This tutorial aims to be neutral regarding what client technology you use, therefore we we’ll do DOM stuff “manually” with jquery and only use backbone and underscore to have a tidy collection of expenditures. You’ll be able to follow even if you’ve never heard of backbone.&lt;/p&gt;
&lt;p&gt;First, &lt;a href=&#34;http://hmil.fr/public/sails_tuto_1.zip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;download this archive&lt;/a&gt;. It contains templates, js models and libs as well as a skeleton for our app script. Copy the assets into your assets folder.&lt;br&gt;You can lift your server and log-into the app. You should see a blank table. Now open your web console and it should display some errors. This is due to the fact that the script you just copied are linked to the layout in no particular order. You can see this by looking at &lt;em&gt;views/layout.ejs&lt;/em&gt;.&lt;br&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;!--SCRIPTS--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script src=&lt;span class=&#34;string&#34;&gt;&#34;/js/dependencies/sails.io.js&#34;&lt;/span&gt;&amp;gt;&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script src=&lt;span class=&#34;string&#34;&gt;&#34;/js/dependencies/backbone.js&#34;&lt;/span&gt;&amp;gt;&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script src=&lt;span class=&#34;string&#34;&gt;&#34;/js/dependencies/bootstrap.js&#34;&lt;/span&gt;&amp;gt;&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script src=&lt;span class=&#34;string&#34;&gt;&#34;/js/dependencies/jquery-1.11.1.js&#34;&lt;/span&gt;&amp;gt;&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script src=&lt;span class=&#34;string&#34;&gt;&#34;/js/dependencies/perfect-scrollbar.js&#34;&lt;/span&gt;&amp;gt;&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script src=&lt;span class=&#34;string&#34;&gt;&#34;/js/dependencies/underscore.js&#34;&lt;/span&gt;&amp;gt;&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script src=&lt;span class=&#34;string&#34;&gt;&#34;/js/ExpenditureModel.js&#34;&lt;/span&gt;&amp;gt;&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script src=&lt;span class=&#34;string&#34;&gt;&#34;/js/app.js&#34;&lt;/span&gt;&amp;gt;&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;!--SCRIPTS END--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Here, backbone and bootstrap are included after jquery and underscore. To correct this, let’s take a look at &lt;em&gt;tasks/pipeline.js&lt;/em&gt;. We will change &lt;em&gt;jsFilesToInject&lt;/em&gt; such that our js files are included in the right order:&lt;/p&gt;
&lt;p&gt;&lt;pre lang=&#34;javascript&#34; line=&#34;24&#34;&gt;&lt;br&gt;var jsFilesToInject = [&lt;br&gt;  // Underscore &amp;amp; jquery before backbone&lt;br&gt;  ‘js/dependencies/jquery-1.11.1.js’,&lt;br&gt;  ‘js/dependencies/perfect-scrollbar.js’,&lt;br&gt;  ‘js/dependencies/underscore.js’,&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;  // Dependencies like jQuery, or Angular are brought in here&lt;br&gt;  ‘js/dependencies/*&lt;em&gt;/&lt;/em&gt;.js’,&lt;/p&gt;
&lt;p&gt;  // The app classes before the app index&lt;br&gt;  ‘js/ExpenditureModel.js’,&lt;/p&gt;
&lt;p&gt;  // All of the rest of your client-side js files&lt;br&gt;  // will be injected here in no particular order.&lt;br&gt;  ‘js/app.js’&lt;br&gt;];&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;While we are here, change _templateFilesToInject_ such that it looks for **.ejs** files instead of **.html**.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;pre lang=&amp;quot;javascript&amp;quot; line=&amp;quot;51&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var templateFilesToInject = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;apos;templates/**/*.ejs&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Save this file and if sails was running in background, the build tasks should run and now our js files should be included in the right order and our templates are compiled.&lt;/p&gt;
&lt;p&gt;Now, let’s write real code. Open &lt;em&gt;assets/js/app.js&lt;/em&gt;. This file contains already everything we need to handle the DOM of the page. What we’ll focus on is how to get data from the server and keep it in sync using Sails’ real-time capabilities. For simplicity we’ll do everything over the socket connection so that we don’t mix protocols.&lt;/p&gt;
&lt;p&gt;We have a backbone expenditure collection that we’ll use to store our expenditures locally and propagate events.&lt;/p&gt;
&lt;p&gt;First thing we’ll do is fetch a list of expenditures from the server. This is what &lt;em&gt;io.socket.get&lt;/em&gt; is for.&lt;br&gt;Let’s add those models to our collection as soon as we get them.&lt;br&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;io.socket.get(&lt;span class=&#34;string&#34;&gt;&#39;/expenditure&#39;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;models&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  expenditures.set(models, &amp;#123;&lt;span class=&#34;attr&#34;&gt;parse&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;We pass the &lt;em&gt;parse: true&lt;/em&gt; option to turn the date string into an actual date object.&lt;br&gt;Add some expenditures with the shortcut routes (for instance &lt;a href=&#34;http://localhost:1337/expenditure/create?amount=32&amp;amp;description=resto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;/create?amount=32&amp;amp;description=resto&lt;/a&gt;) and now you should see them displayed in the table like this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/assets/archive/2014/12/sails-tuto-capture.png&#34;&gt;&lt;img src=&#34;/assets/archive/2014/12/sails-tuto-capture.png&#34; alt=&#34;Yay, we got some data !&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;em&gt;If you can’t see the picture, that’s probably because you created a user before we told passport to get profile pictures of new users. Stop the server, delete &lt;em&gt;.tmp/localDiskDb.db&lt;/em&gt;, then start the server again. Next time you log in, it will create a user from scratch and now your profile picture should be included with it.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now it would be better if we could add expenditures directly from the app. We can insert the code that handles the create form submit action on line 58.&lt;/p&gt;
&lt;p&gt;&lt;pre lang=&#34;javascript&#34; line=&#34;58&#34;&gt;&lt;br&gt;createForm.submit(formAction(createForm, function(formData) {&lt;br&gt;  io.socket.post(‘/expenditure’, formData, function(data, res) {&lt;br&gt;    if (res.statusCode === 201) {&lt;br&gt;      expenditures.add(new expenditures.model(data, {parse: true}));&lt;br&gt;    } else {&lt;br&gt;      console.log(data);&lt;br&gt;    }&lt;br&gt;  });&lt;br&gt;}));&lt;/pre&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Here we use the _post_ method of our socket to create the model, then we check the status code and create a new model if everything went fine. If there was an error, we just log the response body. It would be better to have a proper error handling mechanism of course but we won&amp;apos;t do that in this tutorial.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;You can now see that our models are added to the collection and if you refresh they are still there. Good, now if you open a second tab it won&amp;apos;t automatically update one tab while you add a model in the other. To do this, we need to fill the blank on line 23.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;This callback is invoked every time something changes in our expenditures collection. The passed-in _evt_ object has a _verb_ property which can take one of &amp;quot;created&amp;quot;, &amp;quot;destroyed&amp;quot;, &amp;quot;updated&amp;quot; values.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;With a simple switch, we can handle each of these cases:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;```javascript&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;io.socket.on(&amp;apos;expenditure&amp;apos;, function(evt) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  switch (evt.verb) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    case &amp;apos;created&amp;apos;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      expenditures.add(evt.data, &amp;#123;parse: true&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      break;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    case &amp;apos;destroyed&amp;apos;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      expenditures.remove(evt.id);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      break;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    case &amp;apos;updated&amp;apos;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      var data = _.extend(&amp;#123;id: evt.id&amp;#125;, evt.data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      expenditures.set(data, &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        parse: true, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        remove: false &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      break;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    default:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      throw new Error(&amp;quot;Unknown verb: &amp;quot;+evt.verb);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;That’s all we need to make our app real-time !&lt;/p&gt;
&lt;p&gt;Now how about deleting items. We have an event handler for that on what should now be line 48 and I think you’ve guessed what we’ll write here.&lt;/p&gt;
&lt;p&gt;&lt;pre lang=&#34;javascript&#34; line=&#34;48&#34;&gt;&lt;br&gt;io.socket.delete(‘/expenditure/‘+id, function(data, res) {&lt;br&gt;  if (res.statusCode === 200) {&lt;br&gt;    expenditures.remove(id);&lt;br&gt;  } else {&lt;br&gt;    console.log(data);&lt;br&gt;  }&lt;br&gt;});&lt;/pre&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;And last but not least, we want to edit our records. This is done by clicking the edit icon which shows up a dialog. We need to write what happens when this dialog is submitted.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;```javascript&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$(&amp;apos;#editModal-accept-btn&amp;apos;).click(itemAction(function(evt) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// Retrieve form data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var formData = getFormData(editForm);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var id = editedItem.id;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// Save to the server&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;io.socket.put(&amp;apos;/expenditure/&amp;apos;+id, formData, function(data, res) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // If successful&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if (res.statusCode === 200) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // update the collection locally&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var data = _.defaults(&amp;#123;id: id&amp;#125;, data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    expenditures.set(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      data, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#123;parse: true, remove: false&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Congratulations, you now have a fully functionnal app !&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now if you log-in as another user, the edit and delete actions are shown on expenditures you did not create. Of course, the server forbids this but it would be better if they were hidden. To do this, we’ll need to know which client is currently connected from the client-side javascript. The easiest way to do it is by adding a script in layout.ejs which injects a user object for the logged-in user in the client’s javascript scope. We need to be careful though as layout can be displayed even when the user is not logged in. Add this in &lt;em&gt;views/layout.ejs&lt;/em&gt; right before the other scripts.&lt;br&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script type=&lt;span class=&#34;string&#34;&gt;&#34;text/javascript&#34;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; user = &lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;%-&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;JSON.stringify&lt;/span&gt;(&lt;span class=&#34;attr&#34;&gt;req.user&lt;/span&gt;) || &#39;&lt;span class=&#34;attr&#34;&gt;null&lt;/span&gt;&#39; %&amp;gt;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Now we can use this client object in our client-side scripts. Let’s edit &lt;em&gt;assets/templates/expenditureItem.ejs&lt;/em&gt;, we will wrap the actions in an if statement like this:&lt;/p&gt;
&lt;p&gt;&lt;pre lang=&#34;javascript&#34; line=&#34;14&#34;&gt;&lt;br&gt;&amp;lt;% // person is available as a template variable. user is taken from the global scope&lt;br&gt; if (person.id === user.id) { %&amp;gt;&lt;br&gt;  [“&amp;gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;  ](#)&lt;br&gt;  [“&amp;gt;&lt;/p&gt;
&lt;p&gt;  ](#)&lt;br&gt;&amp;lt;% } %&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;`&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;From there, if you want to use mongodb as your data store, the only thing you need to do is put your configuration in &lt;em&gt;config/connections.js&lt;/em&gt; and set that connection in &lt;em&gt;config/model.js&lt;/em&gt;. I think it’s a really great framework with powerful features despite the fact it currently lacks contributors (and documentation). &lt;/p&gt;
&lt;p&gt;I hope this tutorial gave you a good insight at how Sails works and that you’ll have fun building awesome app with it! Feel free to ask any question on &lt;a href=&#34;https://twitter.com/HadrienMilano&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;twitter&lt;/a&gt; or add a comment below.&lt;/p&gt;
</description>
        </item>
        <item>
            <guid isPermalink="true">https://code.hmil.fr/2014/12/archive/sailsjs-tutorial-expenses-tracking-app-part-3/</guid>
            <title>SailsJS tutorial &amp;#124; expenses tracking app (Part 3/4)</title>
            <link>https://code.hmil.fr/2014/12/archive/sailsjs-tutorial-expenses-tracking-app-part-3/</link>
            <pubDate>Wed, 10 Dec 2014 09:50:36 +0100</pubDate>
            <description>&lt;p&gt;&lt;a href=&#34;http://blog.hmil.fr/2014/12/sailsjs-tutorial-expenses-tracking-app-part-2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Previously&lt;/a&gt; in SailsJS tutorial:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We created a Sails app and added authentication with passport&lt;/li&gt;
&lt;li&gt;We added our styles and less without worrying about compilation and linking&lt;/li&gt;
&lt;li&gt;We implemented a basic layout that shows the user’s login status&lt;br&gt;To be fair, the two last parts were actually pretty boring. But now comes the real fun: generating models and APIs. This is something Sails excels at and we’ll really feel like we are building something fast!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Generating-models-and-APIs&#34;&gt;&lt;a href=&#34;#Generating-models-and-APIs&#34; class=&#34;headerlink&#34; title=&#34;Generating models and APIs&#34;&gt;&lt;/a&gt;Generating models and APIs&lt;/h2&gt;&lt;p&gt;When we used &lt;a href=&#34;https://www.npmjs.org/package/sails-generate-auth&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sails-generate-auth&lt;/a&gt;, we already created a User model. Now the fundamental model for an expenditures tracking app is… guess what ? Expenditures!&lt;br&gt;They have the following attributes: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an amount to see how much was spent&lt;/li&gt;
&lt;li&gt;a date to sort them chronologically&lt;/li&gt;
&lt;li&gt;the person who paid&lt;/li&gt;
&lt;li&gt;and a description to remember what it was for&lt;br&gt;Remember: we do not model money exchange, as in “Alice paid XX$ to Bob”. Instead we model individual losses and earnings like this : “Alice spent XX$. Bob earned XX$” (it takes two records instead of one). It looks cumbersome for a group of two but for larger groups it performs better because a user doesn’t need to keep track of his debts for each individual person. Instead there’s just one number to sum everything up.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anyway, let’s get back to our expenditures model. We will generate it using the command line tool&lt;br&gt;&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sails generate api expenditure&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This generates an empty Expenditure model and an empty ExpenditureController controller under &lt;em&gt;api/&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It may seem quite useless but there’s actually a lot going on already. To demonstrate this, let’s just &lt;em&gt;lift&lt;/em&gt; the server. Navigate to localhost:1337/expenditure and you see an empty JSON array. Try browsing to /expenditure/create?amount=39&amp;amp;description=foobar then get back to /expenditure. You just created a model!&lt;br&gt;You can update your model similarly by navigating to /expenditure/update/:id/? where &lt;em&gt;:id&lt;/em&gt; is the id of your model and passing similar arguments as for create. You can destroy a model with &lt;em&gt;/expenditure/destroy/:id/&lt;/em&gt;&lt;br&gt;Play around with it a little to get familiar and come back when you are done.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A quick note on security: these routes (/create, /update, /destroy) should &lt;strong&gt;never be used in production&lt;/strong&gt;. They can be disabled by setting the property &lt;em&gt;shortcut: false&lt;/em&gt; in &lt;em&gt;config/blueprints.js&lt;/em&gt;. They are called shortcuts for it allows a developer to easily test his api but it is not meant to be used _by_ the app. The reason is, a crawler could find such url and visit it, thinking it will find a page but instead it will start messing with your data!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The right way to use the api is by using the appropriate HTTP terms (GET, POST, PUT, DELETE) like you’d do with &lt;a href=&#34;http://backbonejs.org/#Sync&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;backbonejs&lt;/a&gt;.&lt;br&gt;But, since sails is awesome, they built something special for you. If you go back to your homepage and open the web console, you see that Sails opens a websocket connection automatically. This socket can be used to perform queries. Instead of using classic HTTP queries, you can use io.socket.(get|post|put|delete). It has the same effect but &lt;strong&gt;acts through the socket.io connection!&lt;/strong&gt;&lt;br&gt;Try the following in your web console. It should create a model then display the list of expenditures and finally destroy the first one it finds:&lt;br&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;io.socket.post(&lt;span class=&#34;string&#34;&gt;&#39;/expenditure&#39;&lt;/span&gt;, &amp;#123;&lt;span class=&#34;attr&#34;&gt;amount&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;42&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;description&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&#34;bought the hitchhiker&#39;s guide&#34;&lt;/span&gt;&amp;#125;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  io.socket.get(&lt;span class=&#34;string&#34;&gt;&#39;/expenditure&#39;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;expenditures&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(expenditures);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    io.socket.delete(&lt;span class=&#34;string&#34;&gt;&#39;/expenditure/&#39;&lt;/span&gt;+expenditures[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].id);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Great, we wrote nothing and have a fully working REST API. It does a lot of things including things we don’t want. The fun thing here is that building an API with Sails consists mostly in having it &lt;em&gt;not do what we don’t want it to do&lt;/em&gt; rather than trying to make it do things.&lt;/p&gt;
&lt;h2 id=&#34;The-API-under-control&#34;&gt;&lt;a href=&#34;#The-API-under-control&#34; class=&#34;headerlink&#34; title=&#34;The API under control!&#34;&gt;&lt;/a&gt;The API under control!&lt;/h2&gt;&lt;p&gt;Let’s begin by defining model attributes as well as their types. This way we will force our records to conform to some predefined schema.&lt;br&gt;In config/model.js, add the line &lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;schema: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;``&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;`. This tells sails that it must follow strictly the schemas we are about to define.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;Now in models/Expenditure.js, insert the following code to define the attributes we talked about earlier:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;``&lt;/span&gt;javascript&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  attributes: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    person    : &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      model: &lt;span class=&#34;string&#34;&gt;&#39;user&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      required: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    amount    : &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      type: &lt;span class=&#34;string&#34;&gt;&#39;integer&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      required: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    date      : &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      type: &lt;span class=&#34;string&#34;&gt;&#39;date&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      required: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    description: &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      type: &lt;span class=&#34;string&#34;&gt;&#39;string&#39;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Also we will want our Users to have a picture attribute. To do this, add a picture attribute of type string. Your User model should look like this:&lt;br&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; User = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Enforce model schema in the case of schemaless databases&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  schema: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  attributes: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    username  : &amp;#123; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&#39;string&#39;&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;unique&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    picture   : &amp;#123; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&#39;string&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    passports : &amp;#123; &lt;span class=&#34;attr&#34;&gt;collection&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&#39;Passport&#39;&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;via&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&#39;user&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note that the ‘schema: true’ attribute is optional now that we defined it in the global configuration.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now you can restart the server and if you try to insert nonsense in the database, Sails won’t let you anymore.&lt;/p&gt;
&lt;p&gt;Next, we’ll add some policies such that only logged in users can access the expenditures API.&lt;/p&gt;
&lt;p&gt;In &lt;em&gt;api/policies/sessionAuth.js&lt;/em&gt; replace the &lt;em&gt;req.session.authenticated&lt;/em&gt; with &lt;em&gt;req.isAuthenticated()&lt;/em&gt;. It should look like this now&lt;br&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;module&lt;/span&gt;.exports = &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;req, res, next&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (req.isAuthenticated()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; next();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// User is not allowed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res.redirect(&lt;span class=&#34;string&#34;&gt;&#39;/login&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;We will also add a custom policy to check when a user owns an expenditure record.&lt;br&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// api/policies/ownsExpenditure.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;module&lt;/span&gt;.exports = &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;req, res, next&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!req.isAuthenticated()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res.forbidden();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Expenditure.findOne(req.param(&lt;span class=&#34;string&#34;&gt;&#39;id&#39;&lt;/span&gt;)).exec(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;err, exp&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (err) next(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (req.user.id === exp.person) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; next();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res.forbidden();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;To apply these policies, open &lt;em&gt;config/policies.js&lt;/em&gt; and define how policies should be applied like this:&lt;br&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* ... */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ExpenditureController: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&#39;*&#39;&lt;/span&gt;:      [&lt;span class=&#34;string&#34;&gt;&#39;passport&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;ownsExpenditure&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&#39;find&#39;&lt;/span&gt;:   [&lt;span class=&#34;string&#34;&gt;&#39;passport&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;sessionAuth&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&#39;create&#39;&lt;/span&gt;: [&lt;span class=&#34;string&#34;&gt;&#39;passport&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;sessionAuth&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* ... */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;We allow &lt;em&gt;find&lt;/em&gt; and &lt;em&gt;create&lt;/em&gt; actions to anyone who is authenticated. Every other action can only be performed by someone who owns the target expenditure. Note that ownsExpenditure also checks that the user is authenticated so we don’t need to apply the &lt;em&gt;sessionAuth&lt;/em&gt; policy in this case.&lt;/p&gt;
&lt;p&gt;All right, now our app is a little more secure. But we are still taking user input as is without doing any verification on it. We need to implement the create action ourselves, this way we can manipulate user input before it is saved to our DB. The following code does exactly what the automagic action was doing for us before but in addition it also cleans the user input before feeding it to the model. Take a few minutes to understand exactly what happens here:&lt;br&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// api/controllers/ExpenditureController.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  create: &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;req, res, next&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Get only the attributes we want and apply defaults&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; data = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      description: req.param(&lt;span class=&#34;string&#34;&gt;&#39;description&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      amount: req.param(&lt;span class=&#34;string&#34;&gt;&#39;amount&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// The user is taken directly from the request element. This is what&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// passport gives us and the user cannot easily spoof this information&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      person: req.user,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// Parse the provided date or use current date if none is provided&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      date: req.param(&lt;span class=&#34;string&#34;&gt;&#39;date&#39;&lt;/span&gt;) != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt; ? &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Date&lt;/span&gt;(req.param(&lt;span class=&#34;string&#34;&gt;&#39;date&#39;&lt;/span&gt;)) : &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Date&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Create new instance of model using data from params&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Expenditure.create(data).exec(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;err, data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (err) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; next(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// The data field returned does not contain a fully populated&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// person attribute so we use the one at our disposal (req.user) to continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; expenditure = _.extend(data, &amp;#123;&lt;span class=&#34;attr&#34;&gt;person&lt;/span&gt;: req.user&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// You can always use this boolean to check if the request was issued on a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// socket or standard HTTP request&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (req.isSocket) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// Subscribe the current socket&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Expenditure.subscribe(req, expenditure);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// Introduce all class listeners to this instance&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Expenditure.introduce(expenditure);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// Tell everyone listening that a model was created&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      Expenditure.publishCreate(expenditure, req);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// (HTTP 201: Created)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      res.status(&lt;span class=&#34;number&#34;&gt;201&lt;/span&gt;).send(expenditure.toJSON());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Now when a user is logged in and sends a request to create an expenditure, the model gets properly populated with the right ‘person’ attribute. &lt;/p&gt;
&lt;p&gt;Your API is now complete! The last thing we are left with is implementing a front-end and we’ll be done. You may have noticed though that we did not override the update method. Therefore someone could still insert stupid data in our database. As an exercise, you can try implementing the update method such that it filters user input before inserting it in the database. You could start from the &lt;a href=&#34;https://github.com/balderdashy/sails/blob/master/lib/hooks/blueprints/actions/update.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;blueprint implementation&lt;/a&gt;. It contains many comments and it is a good way to learn more about sails and how it works.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.hmil.fr/2014/12/sailsjs-tutorial-expenses-tracking-app-part-4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;In the next part&lt;/strong&gt;&lt;/a&gt;, we’ll write a front-end for our sailsjs app.&lt;/p&gt;
</description>
        </item>
        <item>
            <guid isPermalink="true">https://code.hmil.fr/2014/12/archive/sailsjs-tutorial-expenses-tracking-app-part-2/</guid>
            <title>SailsJS tutorial &amp;#124; expenses tracking app (Part 2/4)</title>
            <link>https://code.hmil.fr/2014/12/archive/sailsjs-tutorial-expenses-tracking-app-part-2/</link>
            <pubDate>Sun, 07 Dec 2014 15:33:56 +0100</pubDate>
            <description>&lt;p&gt;In the &lt;a href=&#34;http://blog.hmil.fr/2014/12/sailsjs-tutorial-expenses-tracking-app-part-1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;previous part&lt;/a&gt;, we set up our application and added an authentication mechanism. It is now time to add our custom views and style. We will also use this opportunity to add dynamic content that changes when the user is logged in and an app page that can only be accessed by logged-in users (using policies).&lt;/p&gt;
&lt;h2 id=&#34;Adding-custom-views&#34;&gt;&lt;a href=&#34;#Adding-custom-views&#34; class=&#34;headerlink&#34; title=&#34;Adding custom views&#34;&gt;&lt;/a&gt;Adding custom views&lt;/h2&gt;&lt;p&gt;Download &lt;a href=&#34;http://hmil.fr/public/sails_tuto_0.zip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this archive&lt;/a&gt; containing the files you’ll need in this part.&lt;/p&gt;
&lt;p&gt;Copy the contents of &lt;em&gt;styles&lt;/em&gt; in the &lt;em&gt;assets/styles/&lt;/em&gt; folder of your project and the &lt;em&gt;views&lt;/em&gt; in &lt;em&gt;views/&lt;/em&gt;. Replace any file that causes a conflict, we don’t need the defaults anymore ;) .&lt;/p&gt;
&lt;p&gt;You may have noticed these comments in &lt;em&gt;view/layout.ejs&lt;/em&gt;&lt;br&gt;&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;lt;!--STYLES--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;lt;!--STYLES END--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;When you start sails, it will automatically watch for changes in your assets/ directory and link your stylesheets by adding the appropriate HTML tags there. This is done &lt;em&gt;via&lt;/em&gt; grunt, you can have a look at the &lt;em&gt;tasks/&lt;/em&gt; folder if you are interested but we won’t detail much how these tasks work in this tutorial.&lt;/p&gt;
&lt;p&gt;Now lift your app and refresh your browser. You should see a homepage like the one in the &lt;a href=&#34;http://expensiveapp.hmil.fr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;demo&lt;/a&gt;. The first thing you’ll notice though is that the title and the description appear as ‘app_name’ and ‘app_desc’. It’s time to introduce you with locales.&lt;/p&gt;
&lt;h2 id=&#34;Locales&#34;&gt;&lt;a href=&#34;#Locales&#34; class=&#34;headerlink&#34; title=&#34;Locales&#34;&gt;&lt;/a&gt;Locales&lt;/h2&gt;&lt;p&gt;If you look at &lt;em&gt;homepage.ejs&lt;/em&gt;, you will see that the title and descriptions are wrapped in a call to ___()_ . This function will look at your locales and see if it finds a translation for that string in the user’s language. If it cannot find one, it will use the default locale, otherwise it displays the text as is. Locales files are simply JSON files, one per language, that establish a mapping between keys and translated strings. They are located in config/locales. Copy the locales provided in the project archive to this folder. Also since I’ve only included an English and French translation, you can delete the &lt;em&gt;es.json&lt;/em&gt; and_ de.json _locales and add this line in &lt;em&gt;config/i18n.json&lt;/em&gt;&lt;br&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;locales: [&lt;span class=&#34;string&#34;&gt;&#39;en&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;fr&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;You’ll need to restart the app for these changes to be effective.&lt;/p&gt;
&lt;h2 id=&#34;Showing-login-status&#34;&gt;&lt;a href=&#34;#Showing-login-status&#34; class=&#34;headerlink&#34; title=&#34;Showing login status&#34;&gt;&lt;/a&gt;Showing login status&lt;/h2&gt;&lt;p&gt;Now we’ll want our interface to change when the user is online. One thing we can do is displaying a &lt;em&gt;login&lt;/em&gt; action in the navbar when the user is offline and a &lt;em&gt;logout&lt;/em&gt; action when online. If you look at &lt;em&gt;layout.ejs&lt;/em&gt; line 41 you should see a single login button. Let’s replace this with something more useful:&lt;/p&gt;
&lt;p&gt;&lt;pre lang=&#34;html&#34; line=&#34;41&#34;&gt;&lt;br&gt;&amp;lt;% if (req.isAuthenticated()) { %&amp;gt;&lt;br&gt;  &lt;li&gt;&lt;a href=&#34;/logout&#34;&gt;Log out&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&amp;lt;% } else { %&amp;gt;&lt;br&gt;  &lt;li&gt;&lt;a href=&#34;/login&#34;&gt;Log in&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&amp;lt;% } %&amp;gt;&lt;/pre&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;As you can see, we have access to the request object _req_ from the view and therefore we can know things about our user. Here we want to know if he is authenticated. Now you may wonder where this _isAuthenticated_ method comes from. We actually need to attach it to the req object. The best place to do this is in passport&amp;apos;s policy since we apply this policy everywhere (remember it just allows us to initialize authentication stuff for the current request, it doesn&amp;apos;t actually perform any kind of check). We add this function before calling _next()_ in _api/policies/passport.js_ so that it looks like this:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;```javascript&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;module.exports = function (req, res, next) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // Initialize Passport&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  passport.initialize()(req, res, function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // Use the built-in sessions&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    passport.session()(req, res, function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      // Make the user available throughout the frontend&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      res.locals.user = req.user;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      req.isAuthenticated = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return req.user != null;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      next();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Ok now restart your app, navigate to localhost:1337, log-in&lt;br&gt;Aaannnd it doesn’t work again…&lt;/p&gt;
&lt;p&gt;Before you start throwing virtual stuff at me, just read why it went wrong:&lt;br&gt;If you look at your routes (&lt;em&gt;/config/routes.js&lt;/em&gt;), you’ll see that our homepage view is served directly. This means the view is rendered without the request passing through any controller action. But &lt;strong&gt;policies are only applied to action routes!&lt;/strong&gt; So we’ll need to create an action to display the home page since we want our passport policy to apply.&lt;br&gt;Using the command line, be sure to be at the root of your project and run&lt;br&gt;&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sails generate controller main index app&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This generates a controller called main with two actions index and app. We’ll use index to show the homepage and app to show the actual application page.&lt;br&gt;Open your newly created &lt;em&gt;MainController&lt;/em&gt; (under &lt;em&gt;api/controllers/&lt;/em&gt;) and replace the index action with the following:&lt;br&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;index: &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;req, res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res.view(&lt;span class=&#34;string&#34;&gt;&#39;homepage&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Then last thing to do is tell sails to call our controller action when a user reaches ‘/‘. To do this, in &lt;em&gt;config/routes.js&lt;/em&gt; remove the value assigned to ‘/‘ and add the following instead:&lt;br&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#39;/&#39;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&#39;MainController.index&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#39;/app&#39;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&#39;MainController.app&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Note that we are also binding another route that will be useful later.&lt;/p&gt;
&lt;p&gt;Now everything should work fine. Try logging-in and out a few times, the navbar updates accordingly.&lt;/p&gt;
&lt;p&gt;All right, now we have our custom styles implemented and a basic layout for the app. We can start focusing on the core of the app. In the next part, we will create models and APIs to interact with data relevant to our app and we’ll implement access control to make this a little more secure.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.hmil.fr/2014/12/sailsjs-tutorial-expenses-tracking-app-part-3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Read the next part!&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
            <guid isPermalink="true">https://code.hmil.fr/2014/12/archive/sailsjs-tutorial-expenses-tracking-app-part-1/</guid>
            <title>SailsJS tutorial &amp;#124; expenses tracking app (part 1/4)</title>
            <link>https://code.hmil.fr/2014/12/archive/sailsjs-tutorial-expenses-tracking-app-part-1/</link>
            <pubDate>Fri, 05 Dec 2014 20:09:03 +0100</pubDate>
            <description>&lt;p&gt;Hello internet,&lt;/p&gt;
&lt;p&gt;If you know about SailsJS you also probably know there’s little resources out there to learn this framework. So I though it could be useful to share my personal experience with Sails.&lt;br&gt;This tutorial will cover the following topics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Third-party authentication with passport&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The assets pipeline&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interfacing with a realtime JavaScript frontend&lt;/strong&gt;&lt;br&gt;It should not take you more than an hour to complete and I guess it is particularly well suited for those who, like me, prefer to learn by example.&lt;br&gt;I assume you are already familiar with &lt;a href=&#34;http://nodejs.org&#34; title=&#34;nodejs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;node&lt;/a&gt; and it’s better if you’ve already played a bit with &lt;a href=&#34;http://expressjs.com/&#34; title=&#34;ExpressJS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;express&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Motivation&#34;&gt;&lt;a href=&#34;#Motivation&#34; class=&#34;headerlink&#34; title=&#34;Motivation&#34;&gt;&lt;/a&gt;Motivation&lt;/h2&gt;&lt;p&gt;In this tutorial, we will build a small app to streamline expenses management in groups.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You can check out a live demo &lt;a href=&#34;http://expensiveapp.hmil.fr&#34; title=&#34;tutorial demo application&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;em&gt;(hint: open the app in two different windows to see the realtime component in action)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Everybody enters how much they paid for the group and how much they got from the group. Each person then gets a report telling how much they have to pay or how much people owe her.&lt;br&gt;Although our version will be pretty stupid I think it is interesting because we will add a realtime twist to it and also we’ll have to interface with third party auth providers so that the user doesn’t have to remember a password just for this app.&lt;/p&gt;
&lt;p&gt;All right, let’s get started !&lt;/p&gt;
&lt;h2 id=&#34;Generating-the-app&#34;&gt;&lt;a href=&#34;#Generating-the-app&#34; class=&#34;headerlink&#34; title=&#34;Generating the app&#34;&gt;&lt;/a&gt;Generating the app&lt;/h2&gt;&lt;p&gt;Sails comes with a handy command line tool that accelerates repetitive tasks. Install it with&lt;br&gt;&lt;figure class=&#34;highlight console&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo npm install -g sails&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;That’s it you are now ready to get started !&lt;br&gt;cd to your workspace and run&lt;br&gt;&lt;figure class=&#34;highlight console&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sails new myApp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This will create a sails application with default settings in a “myApp” folder.&lt;br&gt;cd into it and then simply run&lt;br&gt;&lt;figure class=&#34;highlight console&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cd myApp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sails lift&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/assets/archive/2014/12/sails_lift.png&#34;&gt;&lt;img src=&#34;/assets/archive/2014/12/sails_lift.png&#34; alt=&#34;sails_lift&#34;&gt;&lt;/a&gt;&lt;br&gt;Now navigate to &lt;a href=&#34;http://localhost:1337&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;localhost:1337&lt;/a&gt;. You should see a nice homepage.&lt;/p&gt;
&lt;h2 id=&#34;Authentication&#34;&gt;&lt;a href=&#34;#Authentication&#34; class=&#34;headerlink&#34; title=&#34;Authentication&#34;&gt;&lt;/a&gt;Authentication&lt;/h2&gt;&lt;p&gt;While we are generating our app skeleton let’s deal with the authentication right now so we won’t have to worry about it later.&lt;br&gt;We will use a generator for that purpose. One good thing about sails is that you can do many things without writing explicit code, and when you have to do so, there’s a generator that writes it for you !&lt;br&gt;&lt;figure class=&#34;highlight console&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo npm install -g sails-generate-auth&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Now at the root of your app, generate auth stuff with&lt;br&gt;&lt;figure class=&#34;highlight console&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sails generate auth&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This generated a bunch of files, including a controller to handle login, logout and registration, a User model and a template config file. Now there’s still some configuration work to do.&lt;/p&gt;
&lt;p&gt;First, in config/passport.js, you can see some of the supported auth strategies. For this demo we’ll use a third party provider. Pick your favorite one, comment out the other ones (including &lt;em&gt;local&lt;/em&gt;) create an app on their website and come back with your app ID and SECRET. You’ll also need to add a “profileFields” property to tell passport what information you want it to fetch on registration.&lt;br&gt;I used &lt;a href=&#34;https://developers.facebook.com/apps&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;facebook&lt;/a&gt; and it gives me something like this:&lt;br&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;module&lt;/span&gt;.exports.passport = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  facebook: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    name: &lt;span class=&#34;string&#34;&gt;&#39;Facebook&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    protocol: &lt;span class=&#34;string&#34;&gt;&#39;oauth2&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    strategy: &lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&#39;passport-facebook&#39;&lt;/span&gt;).Strategy,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    options: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// Don&#39;t forget to add this line &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      profileFields: [&lt;span class=&#34;string&#34;&gt;&#39;id&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;displayName&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;photos&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;username&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;email&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      clientID: &lt;span class=&#34;string&#34;&gt;&#39;MY_APP_ID&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      clientSecret: &lt;span class=&#34;string&#34;&gt;&#39;MY_APP_SECRET&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Next thing you’ll have to do is open config/routes.js and add these routes:&lt;br&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// There should already be this:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#39;/&#39;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  view: &lt;span class=&#34;string&#34;&gt;&#39;homepage&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// So you just need to add that:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#39;get /login&#39;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&#39;AuthController.login&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#39;get /logout&#39;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&#39;AuthController.logout&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#39;get /register&#39;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&#39;AuthController.register&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#39;post /auth/local&#39;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&#39;AuthController.callback&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#39;post /auth/local/:action&#39;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&#39;AuthController.callback&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#39;get /auth/:provider&#39;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&#39;AuthController.provider&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#39;get /auth/:provider/callback&#39;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&#39;AuthController.callback&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#39;get /auth/:provider/:action&#39;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&#39;AuthController.callback&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This wires up the AuthController you generated two minutes ago to sail’s HTTP router by binding HTTP routes to the appropriate controller actions.&lt;/p&gt;
&lt;p&gt;All right you’re almost there, we’ll now open config/bootstrap.js and change the contents with this:&lt;br&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;module&lt;/span&gt;.exports.bootstrap = &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;cb&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  sails.services.passport.loadStrategies();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  cb();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This function is called when you &lt;em&gt;lift&lt;/em&gt; your app allowing you to perform initial loading. Here we tell passport to load the strategies we specified in config/passport.js.&lt;/p&gt;
&lt;p&gt;You now have a working authentication mechanism integrated in your app ! The last thing to do is to add the passport policy to all routes. This tells sails that every incoming request should go through passport’s middleware before reaching any controller. The middleware will transparently take care of associating sessions with users so that you can user req.user to know who you are dealing with in your controller and views.&lt;br&gt;To do so, add the following line in config/policies.js&lt;br&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#39;*&#39;&lt;/span&gt;: [ &lt;span class=&#34;string&#34;&gt;&#39;passport&#39;&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;All right, you’re done, now let’s lift the app again…&lt;br&gt;Aaaand it fails.&lt;/p&gt;
&lt;p&gt;What happened is that the generator generates the code for you but doesn’t install the required modules. You’ll need the following modules:&lt;br&gt;&lt;figure class=&#34;highlight console&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm install --save passport passport-facebook validator bcryptjs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;OK now you can &lt;em&gt;lift&lt;/em&gt; and it should work. You will be asked the data migration mode, choose any option it doesn’t matter. You can turn this off by uncommenting the line &lt;em&gt;migrate: ‘alter’&lt;/em&gt; in &lt;em&gt;config/models.js&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Navigate to &lt;a href=&#34;http://localhost:1337/login&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;/login&lt;/a&gt;, log in the app and you should be redirected to the homepage. You cannot see your login status yet but don’t worry this will come in the next part.&lt;/p&gt;
&lt;p&gt;If you are still with me at this point, congratulations ! You just did the hard part. With this in place, we can start doing fun stuff and see how Sails really saves us huge amounts of time.&lt;/p&gt;
&lt;p&gt;In the next part, we will remove this ugly homepage and add our own views, we will also add assets and see how sails assets pipeline makes your life easier.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://blog.hmil.fr/2014/12/sailsjs-tutorial-expenses-tracking-app-part-2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go to part 2!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        <item>
            <guid isPermalink="true">https://code.hmil.fr/2014/11/archive/cagificator-behind-the-scenes/</guid>
            <title>Cagificator: behind the scenes</title>
            <link>https://code.hmil.fr/2014/11/archive/cagificator-behind-the-scenes/</link>
            <pubDate>Wed, 19 Nov 2014 18:33:58 +0100</pubDate>
            <description>&lt;p&gt;After a few successful cagifications of my friend’s profile pictures I felt the need for an automated tool to save me some time. So I quickly hacked &lt;a href=&#34;http://cage.hmil.fr&#34; title=&#34;The cagificator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a cagifier app&lt;/a&gt; for that purpose. In this article I will explain a little bit of what’s behind this app and how it could be improved.&lt;/p&gt;
&lt;p&gt;To get started, I analyzed how a manual cagification is done and how it could be automated. When you manually cage someone, you usually follow these steps:&lt;br&gt;1. Find a good candidate face replacement&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Align it with the original face’s features (eyes, mouth, …)&lt;br&gt;3. Adjust the hue/saturation/value&lt;br&gt;4. fade out the edges to get a smooth transition&lt;br&gt;&lt;del&gt;5. upload the image as the victim’s facebook profile picture&lt;/del&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We quickly see what the main challenges are. First one must identify faces in the picture and extract features positions. Second, a powerful color correction algorithm must be applied. And finally we must be able to choose a suitable candidate from a replacement picture database.&lt;/p&gt;
&lt;p&gt;To make things easier, I decided to manually create a collection of replacements masks. These masks are face pictures with smooth edges and cut just the right way to avoid showing face borders (hair, chin, ears, …). Now on to the serious stuff:&lt;/p&gt;
&lt;h2 id=&#34;Face-detection&#34;&gt;&lt;a href=&#34;#Face-detection&#34; class=&#34;headerlink&#34; title=&#34;Face detection&#34;&gt;&lt;/a&gt;Face detection&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;/assets/archive/2014/11/landmarks.jpg&#34;&gt;&lt;img src=&#34;/assets/archive/2014/11/landmarks.jpg&#34; alt=&#34;landmarks&#34;&gt;&lt;/a&gt;&lt;br&gt;There’s this awesome tool called &lt;a href=&#34;http://cmp.felk.cvut.cz/~uricamic/flandmark/&#34; title=&#34;flandmarks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;flandmarks&lt;/a&gt; which allows you to extract facial landmarks from an image. But first you need to get a bounding box for the face. For that I chose to use OpenCV’s haar cascades. There’s a good tutorial on that &lt;a href=&#34;http://docs.opencv.org/trunk/doc/py_tutorials/py_objdetect/py_face_detection/py_face_detection.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. Then let flandmarks do its magic and you’ve got the data you need. Flandmarks comes with an example showing how to do that with OpenCV.&lt;/p&gt;
&lt;p&gt;This needs to be computed once for all replacement pictures and then once for every picture submited. To align the faces I just compute a transformation matrix that has one translation, one scaling and a rotation such that the leftmost and rightmost points (edge of the eyes) are aligned and the face “height” (y offset between the eyes and the mouth) is the same. This is basic linear algebra that won’t be discussed here.&lt;/p&gt;
&lt;h2 id=&#34;Color-correction&#34;&gt;&lt;a href=&#34;#Color-correction&#34; class=&#34;headerlink&#34; title=&#34;Color correction&#34;&gt;&lt;/a&gt;Color correction&lt;/h2&gt;&lt;p&gt;The color correction tries to mimic the way I would do it by hand.&lt;br&gt;First I compute an HSV histogram for the target and replacement face. To get the target’s histogram I use the alpha mask of the candidate such that both histograms are computed on the same set of pixels.&lt;/p&gt;
&lt;p&gt;The hue is the easiest part : I compute the mean HUE and then I shift the HUE of every pixel in the replacement picture by the offset between both mean values.&lt;br&gt;For Value and Saturation, it gets a little more tricky. I first tried to multiply V and S of every pixel by some coefficient such that the mean Saturation of the replacement matches the mean Saturation of the target. But this tends to attenuate contrast and the difference in contrast is highly visible.&lt;br&gt;So i tried another way, hopefully a more successful one. If i want to keep the same contrast as the original level, I would actually need to identify the “range” in which most of the histogram bars are and stretch the replacement image histogram to fit the target’s one.&lt;br&gt;The easiest way to do that is compute a linear function y = ax + b that’s applied to the target’s pixels. With a well chosen function we can have the target and replacement histograms overlap as shown in the following picture.&lt;/p&gt;
&lt;p&gt;[caption id=”attachment_44” align=”alignnone” width=”1195”]&lt;a href=&#34;/assets/archive/2014/11/histograms.png&#34;&gt;&lt;img src=&#34;/assets/archive/2014/11/histograms.png&#34; alt=&#34;histograms&#34;&gt;&lt;/a&gt; From left to right: masked target image, replacement image, color-corrected replacement ; Hue (H), Saturation (S) and Value (V) plots.&lt;br&gt; The plot shows: the target image histograms (red) and the corrected replacement (green). We can see that the replacement’s V histogram has been stretched so that it occupies all of the available space (replacement has less contrast than target) and that its S plot was compressed near zero (conversion to black and white).&lt;br&gt; Hue is pointless since this is B&amp;amp;W. The horizontal red line is the threshold.[/caption]&lt;/p&gt;
&lt;p&gt;To determine the coefficients a and b, we pick an arbitrary threshold. All bars lower than this threshold in the histogram are ignored. We can then get the minimum and maximum values for which there is something in the histogram. We do this for both the target and the replacement and then it’s high school math to find a and b.This work is done independently for the S and V channels as they are independent variables.&lt;/p&gt;
&lt;p&gt;In the end, the following correction is applied to each pixel :&lt;br&gt;&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;dstS = srcS * aS + bS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dstV = srcV * aV + bV&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// Hue is cyclic so instead of capping max and min values, use a modulo&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dstH = srcH + (targetMeanH - replacementMeanH) % 255&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;Candidate-picking&#34;&gt;&lt;a href=&#34;#Candidate-picking&#34; class=&#34;headerlink&#34; title=&#34;Candidate picking&#34;&gt;&lt;/a&gt;Candidate picking&lt;/h2&gt;&lt;p&gt;The last big feature to implement is choosing the right replacement image. Now I was a bit tired of this project when reaching this point so I definitely chose the lazy option. That is, to compute the transformations mentioned above for each picture, then compute the sum of the absolute color difference for each pixel of the image. The replacement that has the lowest sum is the best.&lt;/p&gt;
&lt;p&gt;This is definitely not optimal since it favors overall low absolute difference but does not deal with face alignments. One could hope that if for instance the mouth is not well aligned, it will yield a higher score and the candidate will be rejected. However it is not the case and many results suffer from alignment problems. Also this solution is computationally intensive and you can see it starts lagging seriously when your image contains multiple faces.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Overall it’s been a fun experiment and although this is far from perfect, I’m amazed to see that for some particular images I wouldn’t have done better myself.&lt;br&gt;Be sure to &lt;a href=&#34;http://cage.hmil.fr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;try it out&lt;/a&gt; and if you obtain nice results, feel free to link the picture in the comments !&lt;/p&gt;
</description>
        </item>
        <item>
            <guid isPermalink="true">https://code.hmil.fr/2014/11/archive/a-cli-tool-to-generate-badges/</guid>
            <title>A cli tool to generate badges</title>
            <link>https://code.hmil.fr/2014/11/archive/a-cli-tool-to-generate-badges/</link>
            <pubDate>Sun, 02 Nov 2014 11:28:17 +0100</pubDate>
            <description>&lt;p&gt;You may have noticed how CI badges are taking over on github. By CI badge, I mean this kind of things: &lt;img src=&#34;https://raw.githubusercontent.com/hmil/node-project-badge/master/images/build-success.png&#34; alt=&#34;[build passing]&#34;&gt;&lt;br&gt;Build status, code coverage, package version, … There are badge for about everything.&lt;/p&gt;
&lt;p&gt;I wanted these badges for a school project where we had our own jenkins server running somewhere. The thing is, all of these badges come with the associated SaaS (like &lt;a href=&#34;http://travis-ci.org&#34; title=&#34;travis-ci&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;travis&lt;/a&gt; or &lt;a href=&#34;https://coveralls.io/&#34; title=&#34;coveralls&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;coveralls&lt;/a&gt;). I wanted a CLI tool to generate these on my server from a bash script and I couldn’t find that so I built it.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The goal was to have one tool able to generate any kind of badge with a unified style and little configuration. There would be shared style settings and different badge &lt;em&gt;kinds&lt;/em&gt; which would inherit these settings. Each &lt;em&gt;kind&lt;/em&gt; would then take as few configuration as possible to cover all major use cases._ _It also had to be easily extendable so that anyone can add new &lt;em&gt;kinds&lt;/em&gt; of badge.&lt;/p&gt;
&lt;p&gt;The solution I came up with was to render on an &lt;a href=&#34;https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;html5 2D rendering context&lt;/a&gt;. It is then possible to render badges in the browser or in node using the exact same code.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;From there, I just had to hook up &lt;a href=&#34;https://github.com/Automattic/node-canvas&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;node-canvas&lt;/a&gt; with the existing library, translate CLI arguments to badge settings and that was it. A flexible CLI badge generator. I even added a few built-in configuration files to reduce the number of arguments required to generate popular badges.&lt;/p&gt;
&lt;p&gt;The only problem is that node-canvas uses a native library called &lt;a href=&#34;http://cairographics.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cairo&lt;/a&gt;. This means you need to install this dependency separately. Also npm needs to build c code when you install the package and it can be a real pain depending on your platform.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Detailed documentation and install instructions are available on github:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The CLI tool (requires node and cairo): &lt;a href=&#34;https://github.com/hmil/node-project-badge&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/hmil/node-project-badge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The underling framework: &lt;a href=&#34;https://github.com/hmil/project-badge&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/hmil/project-badge&lt;/a&gt;&lt;br&gt;They are both MIT-licensed. If you want to add built-in configs or badge kinds, just submit a pull request. All types of contribution are welcome.&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
    </channel>
</rss>